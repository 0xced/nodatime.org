### YamlMime:ManagedReference
items:
- uid: NodaTime.OffsetTime
  commentId: T:NodaTime.OffsetTime
  id: OffsetTime
  parent: NodaTime
  children:
  - NodaTime.OffsetTime.#ctor(NodaTime.LocalTime,NodaTime.Offset)
  - NodaTime.OffsetTime.AddSchema(System.Xml.Schema.XmlSchemaSet)
  - NodaTime.OffsetTime.ClockHourOfHalfDay
  - NodaTime.OffsetTime.Deconstruct(NodaTime.LocalTime@,NodaTime.Offset@)
  - NodaTime.OffsetTime.Equals(NodaTime.OffsetTime)
  - NodaTime.OffsetTime.Equals(System.Object)
  - NodaTime.OffsetTime.GetHashCode
  - NodaTime.OffsetTime.Hour
  - NodaTime.OffsetTime.Millisecond
  - NodaTime.OffsetTime.Minute
  - NodaTime.OffsetTime.NanosecondOfDay
  - NodaTime.OffsetTime.NanosecondOfSecond
  - NodaTime.OffsetTime.Offset
  - NodaTime.OffsetTime.On(NodaTime.LocalDate)
  - NodaTime.OffsetTime.op_Equality(NodaTime.OffsetTime,NodaTime.OffsetTime)
  - NodaTime.OffsetTime.op_Inequality(NodaTime.OffsetTime,NodaTime.OffsetTime)
  - NodaTime.OffsetTime.Second
  - NodaTime.OffsetTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - NodaTime.OffsetTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - NodaTime.OffsetTime.TickOfDay
  - NodaTime.OffsetTime.TickOfSecond
  - NodaTime.OffsetTime.TimeOfDay
  - NodaTime.OffsetTime.ToString
  - NodaTime.OffsetTime.ToString(System.String,System.IFormatProvider)
  - NodaTime.OffsetTime.With(System.Func{NodaTime.LocalTime,NodaTime.LocalTime})
  - NodaTime.OffsetTime.WithOffset(NodaTime.Offset)
  langs:
  - csharp
  - vb
  name: OffsetTime
  nameWithType: OffsetTime
  fullName: NodaTime.OffsetTime
  type: Struct
  source:
    id: OffsetTime
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 28
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nA combination of a <xref href=\"NodaTime.LocalTime\" data-throw-if-not-resolved=\"false\"></xref> and an <xref href=\"NodaTime.OffsetTime.Offset\" data-throw-if-not-resolved=\"false\"></xref>, to represent\na time-of-day at a specific offset from UTC but without any date information.\n"
  example: []
  syntax:
    content: >-
      [TypeConverter(typeof(OffsetTimeTypeConverter))]

      public readonly struct OffsetTime : IEquatable<OffsetTime>, IXmlSerializable, IFormattable
    content.vb: >-
      <TypeConverter(GetType(OffsetTimeTypeConverter))>

      Public Structure OffsetTime
          Implements IEquatable(Of OffsetTime), IXmlSerializable, IFormattable
  implements:
  - System.IEquatable{NodaTime.OffsetTime}
  - System.Xml.Serialization.IXmlSerializable
  - System.IFormattable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: NodaTime.OffsetTime.#ctor(NodaTime.LocalTime,NodaTime.Offset)
  commentId: M:NodaTime.OffsetTime.#ctor(NodaTime.LocalTime,NodaTime.Offset)
  id: '#ctor(NodaTime.LocalTime,NodaTime.Offset)'
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: OffsetTime(LocalTime, Offset)
  nameWithType: OffsetTime.OffsetTime(LocalTime, Offset)
  fullName: NodaTime.OffsetTime.OffsetTime(NodaTime.LocalTime, NodaTime.Offset)
  type: Constructor
  source:
    id: .ctor
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 56
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs an instance of the specified time and offset.\n"
  example: []
  syntax:
    content: public OffsetTime(LocalTime time, Offset offset)
    parameters:
    - id: time
      type: NodaTime.LocalTime
      description: The time part of the value.
    - id: offset
      type: NodaTime.Offset
      description: The offset part of the value.
    content.vb: Public Sub New(time As LocalTime, offset As Offset)
  overload: NodaTime.OffsetTime.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetTime.TimeOfDay
  commentId: P:NodaTime.OffsetTime.TimeOfDay
  id: TimeOfDay
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: TimeOfDay
  nameWithType: OffsetTime.TimeOfDay
  fullName: NodaTime.OffsetTime.TimeOfDay
  type: Property
  source:
    id: TimeOfDay
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 64
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the time-of-day represented by this value.\n"
  example: []
  syntax:
    content: public readonly LocalTime TimeOfDay { get; }
    parameters: []
    return:
      type: NodaTime.LocalTime
      description: The time-of-day represented by this value.
    content.vb: Public ReadOnly Property TimeOfDay As LocalTime
  overload: NodaTime.OffsetTime.TimeOfDay*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetTime.Offset
  commentId: P:NodaTime.OffsetTime.Offset
  id: Offset
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: Offset
  nameWithType: OffsetTime.Offset
  fullName: NodaTime.OffsetTime.Offset
  type: Property
  source:
    id: Offset
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 70
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the offset from UTC of this value.\n<returns>The offset from UTC of this value.</returns>\n"
  example: []
  syntax:
    content: public readonly Offset Offset { get; }
    parameters: []
    return:
      type: NodaTime.Offset
    content.vb: Public ReadOnly Property Offset As Offset
  overload: NodaTime.OffsetTime.Offset*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetTime.Hour
  commentId: P:NodaTime.OffsetTime.Hour
  id: Hour
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: Hour
  nameWithType: OffsetTime.Hour
  fullName: NodaTime.OffsetTime.Hour
  type: Property
  source:
    id: Hour
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 86
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the hour of day of this offset time, in the range 0 to 23 inclusive.\n"
  example: []
  syntax:
    content: public readonly int Hour { get; }
    parameters: []
    return:
      type: System.Int32
      description: The hour of day of this offset time, in the range 0 to 23 inclusive.
    content.vb: Public ReadOnly Property Hour As Integer
  overload: NodaTime.OffsetTime.Hour*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetTime.ClockHourOfHalfDay
  commentId: P:NodaTime.OffsetTime.ClockHourOfHalfDay
  id: ClockHourOfHalfDay
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: ClockHourOfHalfDay
  nameWithType: OffsetTime.ClockHourOfHalfDay
  fullName: NodaTime.OffsetTime.ClockHourOfHalfDay
  type: Property
  source:
    id: ClockHourOfHalfDay
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 94
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the hour of the half-day of this offset time, in the range 1 to 12 inclusive.\n"
  example: []
  syntax:
    content: public readonly int ClockHourOfHalfDay { get; }
    parameters: []
    return:
      type: System.Int32
      description: The hour of the half-day of this offset time, in the range 1 to 12 inclusive.
    content.vb: Public ReadOnly Property ClockHourOfHalfDay As Integer
  overload: NodaTime.OffsetTime.ClockHourOfHalfDay*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetTime.Minute
  commentId: P:NodaTime.OffsetTime.Minute
  id: Minute
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: Minute
  nameWithType: OffsetTime.Minute
  fullName: NodaTime.OffsetTime.Minute
  type: Property
  source:
    id: Minute
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 110
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the minute of this offset time, in the range 0 to 59 inclusive.\n"
  example: []
  syntax:
    content: public readonly int Minute { get; }
    parameters: []
    return:
      type: System.Int32
      description: The minute of this offset time, in the range 0 to 59 inclusive.
    content.vb: Public ReadOnly Property Minute As Integer
  overload: NodaTime.OffsetTime.Minute*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetTime.Second
  commentId: P:NodaTime.OffsetTime.Second
  id: Second
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: Second
  nameWithType: OffsetTime.Second
  fullName: NodaTime.OffsetTime.Second
  type: Property
  source:
    id: Second
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 127
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the second of this offset time within the minute, in the range 0 to 59 inclusive.\n"
  example: []
  syntax:
    content: public readonly int Second { get; }
    parameters: []
    return:
      type: System.Int32
      description: The second of this offset time within the minute, in the range 0 to 59 inclusive.
    content.vb: Public ReadOnly Property Second As Integer
  overload: NodaTime.OffsetTime.Second*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetTime.Millisecond
  commentId: P:NodaTime.OffsetTime.Millisecond
  id: Millisecond
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: Millisecond
  nameWithType: OffsetTime.Millisecond
  fullName: NodaTime.OffsetTime.Millisecond
  type: Property
  source:
    id: Millisecond
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 143
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the millisecond of this offset time within the second, in the range 0 to 999 inclusive.\n"
  example: []
  syntax:
    content: public readonly int Millisecond { get; }
    parameters: []
    return:
      type: System.Int32
      description: The millisecond of this offset time within the second, in the range 0 to 999 inclusive.
    content.vb: Public ReadOnly Property Millisecond As Integer
  overload: NodaTime.OffsetTime.Millisecond*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetTime.TickOfSecond
  commentId: P:NodaTime.OffsetTime.TickOfSecond
  id: TickOfSecond
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: TickOfSecond
  nameWithType: OffsetTime.TickOfSecond
  fullName: NodaTime.OffsetTime.TickOfSecond
  type: Property
  source:
    id: TickOfSecond
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 159
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the tick of this offset time within the second, in the range 0 to 9,999,999 inclusive.\n"
  example: []
  syntax:
    content: public readonly int TickOfSecond { get; }
    parameters: []
    return:
      type: System.Int32
      description: The tick of this offset time within the second, in the range 0 to 9,999,999 inclusive.
    content.vb: Public ReadOnly Property TickOfSecond As Integer
  overload: NodaTime.OffsetTime.TickOfSecond*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetTime.TickOfDay
  commentId: P:NodaTime.OffsetTime.TickOfDay
  id: TickOfDay
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: TickOfDay
  nameWithType: OffsetTime.TickOfDay
  fullName: NodaTime.OffsetTime.TickOfDay
  type: Property
  source:
    id: TickOfDay
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 168
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the tick of this offset time within the day, in the range 0 to 863,999,999,999 inclusive.\n"
  remarks: "\nIf the value does not fall on a tick boundary, it will be truncated towards zero.\n"
  example: []
  syntax:
    content: public readonly long TickOfDay { get; }
    parameters: []
    return:
      type: System.Int64
      description: The tick of this offset time within the day, in the range 0 to 863,999,999,999 inclusive.
    content.vb: Public ReadOnly Property TickOfDay As Long
  overload: NodaTime.OffsetTime.TickOfDay*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetTime.NanosecondOfSecond
  commentId: P:NodaTime.OffsetTime.NanosecondOfSecond
  id: NanosecondOfSecond
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: NanosecondOfSecond
  nameWithType: OffsetTime.NanosecondOfSecond
  fullName: NodaTime.OffsetTime.NanosecondOfSecond
  type: Property
  source:
    id: NanosecondOfSecond
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 174
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the nanosecond of this offset time within the second, in the range 0 to 999,999,999 inclusive.\n"
  example: []
  syntax:
    content: public readonly int NanosecondOfSecond { get; }
    parameters: []
    return:
      type: System.Int32
      description: The nanosecond of this offset time within the second, in the range 0 to 999,999,999 inclusive.
    content.vb: Public ReadOnly Property NanosecondOfSecond As Integer
  overload: NodaTime.OffsetTime.NanosecondOfSecond*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetTime.NanosecondOfDay
  commentId: P:NodaTime.OffsetTime.NanosecondOfDay
  id: NanosecondOfDay
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: NanosecondOfDay
  nameWithType: OffsetTime.NanosecondOfDay
  fullName: NodaTime.OffsetTime.NanosecondOfDay
  type: Property
  source:
    id: NanosecondOfDay
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 180
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the nanosecond of this offset time within the day, in the range 0 to 86,399,999,999,999 inclusive.\n"
  example: []
  syntax:
    content: public readonly long NanosecondOfDay { get; }
    parameters: []
    return:
      type: System.Int64
      description: The nanosecond of this offset time within the day, in the range 0 to 86,399,999,999,999 inclusive.
    content.vb: Public ReadOnly Property NanosecondOfDay As Long
  overload: NodaTime.OffsetTime.NanosecondOfDay*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.OffsetTime.WithOffset(NodaTime.Offset)
  commentId: M:NodaTime.OffsetTime.WithOffset(NodaTime.Offset)
  id: WithOffset(NodaTime.Offset)
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: WithOffset(Offset)
  nameWithType: OffsetTime.WithOffset(Offset)
  fullName: NodaTime.OffsetTime.WithOffset(NodaTime.Offset)
  type: Method
  source:
    id: WithOffset
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 187
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCreates a new <xref href=\"NodaTime.OffsetTime\" data-throw-if-not-resolved=\"false\"></xref> for the same time-of-day, but with the specified UTC offset.\n"
  example: []
  syntax:
    content: public readonly OffsetTime WithOffset(Offset offset)
    parameters:
    - id: offset
      type: NodaTime.Offset
      description: The new UTC offset.
    return:
      type: NodaTime.OffsetTime
      description: A new <code>OffsetTime</code> for the same date, but with the specified UTC offset.
    content.vb: Public Function WithOffset(offset As Offset) As OffsetTime
  overload: NodaTime.OffsetTime.WithOffset*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetTime.With(System.Func{NodaTime.LocalTime,NodaTime.LocalTime})
  commentId: M:NodaTime.OffsetTime.With(System.Func{NodaTime.LocalTime,NodaTime.LocalTime})
  id: With(System.Func{NodaTime.LocalTime,NodaTime.LocalTime})
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: With(Func<LocalTime, LocalTime>)
  nameWithType: OffsetTime.With(Func<LocalTime, LocalTime>)
  fullName: NodaTime.OffsetTime.With(System.Func<NodaTime.LocalTime, NodaTime.LocalTime>)
  type: Method
  source:
    id: With
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 199
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns this offset time-of-day, with the given date adjuster applied to it, maintaining the existing offset.\n"
  remarks: "\nIf the adjuster attempts to construct an invalid time-of-day, any exception thrown by\nthat construction attempt will be propagated through this method.\n"
  example: []
  syntax:
    content: public readonly OffsetTime With(Func<LocalTime, LocalTime> adjuster)
    parameters:
    - id: adjuster
      type: System.Func{NodaTime.LocalTime,NodaTime.LocalTime}
      description: The adjuster to apply.
    return:
      type: NodaTime.OffsetTime
      description: The adjusted offset date.
    content.vb: Public Function With(adjuster As Func(Of LocalTime, LocalTime)) As OffsetTime
  overload: NodaTime.OffsetTime.With*
  nameWithType.vb: OffsetTime.With(Func(Of LocalTime, LocalTime))
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.OffsetTime.With(System.Func(Of NodaTime.LocalTime, NodaTime.LocalTime))
  name.vb: With(Func(Of LocalTime, LocalTime))
- uid: NodaTime.OffsetTime.On(NodaTime.LocalDate)
  commentId: M:NodaTime.OffsetTime.On(NodaTime.LocalDate)
  id: On(NodaTime.LocalDate)
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: On(LocalDate)
  nameWithType: OffsetTime.On(LocalDate)
  fullName: NodaTime.OffsetTime.On(NodaTime.LocalDate)
  type: Method
  source:
    id: On
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 209
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCombines this <xref href=\"NodaTime.OffsetTime\" data-throw-if-not-resolved=\"false\"></xref> with the given <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref>\ninto an <xref href=\"NodaTime.OffsetDateTime\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly OffsetDateTime On(LocalDate date)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to combine with this time-of-day.
    return:
      type: NodaTime.OffsetDateTime
      description: The <xref href="NodaTime.OffsetDateTime" data-throw-if-not-resolved="false"></xref> representation of this time-of-day on the given date.
    content.vb: Public Function On(date As LocalDate) As OffsetDateTime
  overload: NodaTime.OffsetTime.On*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetTime.GetHashCode
  commentId: M:NodaTime.OffsetTime.GetHashCode
  id: GetHashCode
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: OffsetTime.GetHashCode()
  fullName: NodaTime.OffsetTime.GetHashCode()
  type: Method
  source:
    id: GetHashCode
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 217
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a hash code for this offset time.\nSee the type documentation for a description of equality semantics.\n"
  example: []
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this offset time.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.OffsetTime.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.OffsetTime.Equals(System.Object)
  commentId: M:NodaTime.OffsetTime.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: OffsetTime.Equals(Object)
  fullName: NodaTime.OffsetTime.Equals(System.Object)
  type: Method
  source:
    id: Equals
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 225
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.OffsetTime\" data-throw-if-not-resolved=\"false\"></xref> values for equality.\nSee the type documentation for a description of equality semantics.\n"
  example: []
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this offset time with.
    return:
      type: System.Boolean
      description: True if the given value is another offset time equal to this one; false otherwise.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.OffsetTime.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.OffsetTime.Equals(NodaTime.OffsetTime)
  commentId: M:NodaTime.OffsetTime.Equals(NodaTime.OffsetTime)
  id: Equals(NodaTime.OffsetTime)
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: Equals(OffsetTime)
  nameWithType: OffsetTime.Equals(OffsetTime)
  fullName: NodaTime.OffsetTime.Equals(NodaTime.OffsetTime)
  type: Method
  source:
    id: Equals
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 233
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.OffsetTime\" data-throw-if-not-resolved=\"false\"></xref> values for equality.\nSee the type documentation for a description of equality semantics.\n"
  example: []
  syntax:
    content: public readonly bool Equals(OffsetTime other)
    parameters:
    - id: other
      type: NodaTime.OffsetTime
      description: The value to compare this offset time with.
    return:
      type: System.Boolean
      description: True if the given value is another offset time equal to this one; false otherwise.
    content.vb: Public Function Equals(other As OffsetTime) As Boolean
  overload: NodaTime.OffsetTime.Equals*
  implements:
  - System.IEquatable{NodaTime.OffsetTime}.Equals(NodaTime.OffsetTime)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetTime.op_Equality(NodaTime.OffsetTime,NodaTime.OffsetTime)
  commentId: M:NodaTime.OffsetTime.op_Equality(NodaTime.OffsetTime,NodaTime.OffsetTime)
  id: op_Equality(NodaTime.OffsetTime,NodaTime.OffsetTime)
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: Equality(OffsetTime, OffsetTime)
  nameWithType: OffsetTime.Equality(OffsetTime, OffsetTime)
  fullName: NodaTime.OffsetTime.Equality(NodaTime.OffsetTime, NodaTime.OffsetTime)
  type: Operator
  source:
    id: op_Equality
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 242
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator == (equality).\nSee the type documentation for a description of equality semantics.\n"
  example: []
  syntax:
    content: public static bool operator ==(OffsetTime left, OffsetTime right)
    parameters:
    - id: left
      type: NodaTime.OffsetTime
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.OffsetTime
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator =(left As OffsetTime, right As OffsetTime) As Boolean
  overload: NodaTime.OffsetTime.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.OffsetTime.op_Inequality(NodaTime.OffsetTime,NodaTime.OffsetTime)
  commentId: M:NodaTime.OffsetTime.op_Inequality(NodaTime.OffsetTime,NodaTime.OffsetTime)
  id: op_Inequality(NodaTime.OffsetTime,NodaTime.OffsetTime)
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: Inequality(OffsetTime, OffsetTime)
  nameWithType: OffsetTime.Inequality(OffsetTime, OffsetTime)
  fullName: NodaTime.OffsetTime.Inequality(NodaTime.OffsetTime, NodaTime.OffsetTime)
  type: Operator
  source:
    id: op_Inequality
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 251
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplements the operator != (inequality).\nSee the type documentation for a description of equality semantics.\n"
  example: []
  syntax:
    content: public static bool operator !=(OffsetTime left, OffsetTime right)
    parameters:
    - id: left
      type: NodaTime.OffsetTime
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.OffsetTime
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are not equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator <>(left As OffsetTime, right As OffsetTime) As Boolean
  overload: NodaTime.OffsetTime.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.OffsetTime.ToString
  commentId: M:NodaTime.OffsetTime.ToString
  id: ToString
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: OffsetTime.ToString()
  fullName: NodaTime.OffsetTime.ToString()
  type: Method
  source:
    id: ToString
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 260
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  example: []
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
      description: "\nThe value of the current instance in the default format pattern (&quot;G&quot;), using the current thread&apos;s\nculture to obtain a format provider.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: NodaTime.OffsetTime.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.OffsetTime.ToString(System.String,System.IFormatProvider)
  commentId: M:NodaTime.OffsetTime.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: OffsetTime.ToString(String, IFormatProvider)
  fullName: NodaTime.OffsetTime.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    id: ToString
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 275
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nFormats the value of the current instance using the specified pattern.\n"
  example: []
  syntax:
    content: public readonly string ToString(string patternText, IFormatProvider formatProvider)
    parameters:
    - id: patternText
      type: System.String
      description: >
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> specifying the pattern to use,

        or null to use the default format pattern (&quot;G&quot;).
    - id: formatProvider
      type: System.IFormatProvider
      description: >
        The <xref href="System.IFormatProvider" data-throw-if-not-resolved="false"></xref> to use when formatting the value,

        or null to use the current thread&apos;s culture to obtain a format provider.
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the value of the current instance in the specified format.\n"
    content.vb: Public Function ToString(patternText As String, formatProvider As IFormatProvider) As String
  overload: NodaTime.OffsetTime.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: NodaTime.OffsetTime.Deconstruct(NodaTime.LocalTime@,NodaTime.Offset@)
  commentId: M:NodaTime.OffsetTime.Deconstruct(NodaTime.LocalTime@,NodaTime.Offset@)
  id: Deconstruct(NodaTime.LocalTime@,NodaTime.Offset@)
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: Deconstruct(out LocalTime, out Offset)
  nameWithType: OffsetTime.Deconstruct(out LocalTime, out Offset)
  fullName: NodaTime.OffsetTime.Deconstruct(out NodaTime.LocalTime, out NodaTime.Offset)
  type: Method
  source:
    id: Deconstruct
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 288
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nDeconstruct this value into its components.\n"
  example: []
  syntax:
    content: public readonly void Deconstruct(out LocalTime localTime, out Offset offset)
    parameters:
    - id: localTime
      type: NodaTime.LocalTime
      description: "\nThe <xref href=\"NodaTime.LocalTime\" data-throw-if-not-resolved=\"false\"></xref> component.\n"
    - id: offset
      type: NodaTime.Offset
      description: "\nThe <xref href=\"NodaTime.OffsetTime.Offset\" data-throw-if-not-resolved=\"false\"></xref> component.\n"
    content.vb: Public Sub Deconstruct(ByRef localTime As LocalTime, ByRef offset As Offset)
  overload: NodaTime.OffsetTime.Deconstruct*
  nameWithType.vb: OffsetTime.Deconstruct(ByRef LocalTime, ByRef Offset)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.OffsetTime.Deconstruct(ByRef NodaTime.LocalTime, ByRef NodaTime.Offset)
  name.vb: Deconstruct(ByRef LocalTime, ByRef Offset)
- uid: NodaTime.OffsetTime.AddSchema(System.Xml.Schema.XmlSchemaSet)
  commentId: M:NodaTime.OffsetTime.AddSchema(System.Xml.Schema.XmlSchemaSet)
  id: AddSchema(System.Xml.Schema.XmlSchemaSet)
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: AddSchema(XmlSchemaSet)
  nameWithType: OffsetTime.AddSchema(XmlSchemaSet)
  fullName: NodaTime.OffsetTime.AddSchema(System.Xml.Schema.XmlSchemaSet)
  type: Method
  source:
    id: AddSchema
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 300
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds the XML schema type describing the structure of the <xref href=\"NodaTime.OffsetTime\" data-throw-if-not-resolved=\"false\"></xref> XML serialization to the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">xmlSchemaSet</code>.\n"
  example: []
  syntax:
    content: public static XmlQualifiedName AddSchema(XmlSchemaSet xmlSchemaSet)
    parameters:
    - id: xmlSchemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: The XML schema set provided by <xref href="System.Xml.Serialization.XmlSchemaExporter" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Xml.XmlQualifiedName
      description: The qualified name of the schema type that was added to the <code data-dev-comment-type="paramref" class="paramref">xmlSchemaSet</code>.
    content.vb: Public Shared Function AddSchema(xmlSchemaSet As XmlSchemaSet) As XmlQualifiedName
  overload: NodaTime.OffsetTime.AddSchema*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.OffsetTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:NodaTime.OffsetTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: OffsetTime.IXmlSerializable.ReadXml(XmlReader)
  fullName: NodaTime.OffsetTime.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  type: Method
  source:
    id: System.Xml.Serialization.IXmlSerializable.ReadXml
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 306
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: readonly void IXmlSerializable.ReadXml(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.ReadXml(reader As XmlReader) Implements IXmlSerializable.ReadXml
  overload: NodaTime.OffsetTime.System#Xml#Serialization#IXmlSerializable#ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: OffsetTime.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  modifiers.csharp:
  - readonly
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: NodaTime.OffsetTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:NodaTime.OffsetTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: NodaTime.OffsetTime
  langs:
  - csharp
  - vb
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: OffsetTime.IXmlSerializable.WriteXml(XmlWriter)
  fullName: NodaTime.OffsetTime.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    id: System.Xml.Serialization.IXmlSerializable.WriteXml
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\OffsetTime.cs
    startLine: 314
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: readonly void IXmlSerializable.WriteXml(XmlWriter writer)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.WriteXml(writer As XmlWriter) Implements IXmlSerializable.WriteXml
  overload: NodaTime.OffsetTime.System#Xml#Serialization#IXmlSerializable#WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: OffsetTime.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  modifiers.csharp:
  - readonly
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
references:
- uid: NodaTime.LocalTime
  commentId: T:NodaTime.LocalTime
  parent: NodaTime
  name: LocalTime
  nameWithType: LocalTime
  fullName: NodaTime.LocalTime
- uid: NodaTime.OffsetTime.Offset
  commentId: P:NodaTime.OffsetTime.Offset
  isExternal: true
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.OffsetTime}
  commentId: T:System.IEquatable{NodaTime.OffsetTime}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<OffsetTime>
  nameWithType: IEquatable<OffsetTime>
  fullName: System.IEquatable<NodaTime.OffsetTime>
  nameWithType.vb: IEquatable(Of OffsetTime)
  fullName.vb: System.IEquatable(Of NodaTime.OffsetTime)
  name.vb: IEquatable(Of OffsetTime)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.OffsetTime
    name: OffsetTime
    nameWithType: OffsetTime
    fullName: NodaTime.OffsetTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.OffsetTime
    name: OffsetTime
    nameWithType: OffsetTime
    fullName: NodaTime.OffsetTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.OffsetTime.#ctor*
  commentId: Overload:NodaTime.OffsetTime.#ctor
  name: OffsetTime
  nameWithType: OffsetTime.OffsetTime
  fullName: NodaTime.OffsetTime.OffsetTime
- uid: NodaTime.Offset
  commentId: T:NodaTime.Offset
  parent: NodaTime
  name: Offset
  nameWithType: Offset
  fullName: NodaTime.Offset
- uid: NodaTime.OffsetTime.TimeOfDay*
  commentId: Overload:NodaTime.OffsetTime.TimeOfDay
  name: TimeOfDay
  nameWithType: OffsetTime.TimeOfDay
  fullName: NodaTime.OffsetTime.TimeOfDay
- uid: NodaTime.OffsetTime.Offset*
  commentId: Overload:NodaTime.OffsetTime.Offset
  name: Offset
  nameWithType: OffsetTime.Offset
  fullName: NodaTime.OffsetTime.Offset
- uid: NodaTime.OffsetTime.Hour*
  commentId: Overload:NodaTime.OffsetTime.Hour
  name: Hour
  nameWithType: OffsetTime.Hour
  fullName: NodaTime.OffsetTime.Hour
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.OffsetTime.ClockHourOfHalfDay*
  commentId: Overload:NodaTime.OffsetTime.ClockHourOfHalfDay
  name: ClockHourOfHalfDay
  nameWithType: OffsetTime.ClockHourOfHalfDay
  fullName: NodaTime.OffsetTime.ClockHourOfHalfDay
- uid: NodaTime.OffsetTime.Minute*
  commentId: Overload:NodaTime.OffsetTime.Minute
  name: Minute
  nameWithType: OffsetTime.Minute
  fullName: NodaTime.OffsetTime.Minute
- uid: NodaTime.OffsetTime.Second*
  commentId: Overload:NodaTime.OffsetTime.Second
  name: Second
  nameWithType: OffsetTime.Second
  fullName: NodaTime.OffsetTime.Second
- uid: NodaTime.OffsetTime.Millisecond*
  commentId: Overload:NodaTime.OffsetTime.Millisecond
  name: Millisecond
  nameWithType: OffsetTime.Millisecond
  fullName: NodaTime.OffsetTime.Millisecond
- uid: NodaTime.OffsetTime.TickOfSecond*
  commentId: Overload:NodaTime.OffsetTime.TickOfSecond
  name: TickOfSecond
  nameWithType: OffsetTime.TickOfSecond
  fullName: NodaTime.OffsetTime.TickOfSecond
- uid: NodaTime.OffsetTime.TickOfDay*
  commentId: Overload:NodaTime.OffsetTime.TickOfDay
  name: TickOfDay
  nameWithType: OffsetTime.TickOfDay
  fullName: NodaTime.OffsetTime.TickOfDay
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: NodaTime.OffsetTime.NanosecondOfSecond*
  commentId: Overload:NodaTime.OffsetTime.NanosecondOfSecond
  name: NanosecondOfSecond
  nameWithType: OffsetTime.NanosecondOfSecond
  fullName: NodaTime.OffsetTime.NanosecondOfSecond
- uid: NodaTime.OffsetTime.NanosecondOfDay*
  commentId: Overload:NodaTime.OffsetTime.NanosecondOfDay
  name: NanosecondOfDay
  nameWithType: OffsetTime.NanosecondOfDay
  fullName: NodaTime.OffsetTime.NanosecondOfDay
- uid: NodaTime.OffsetTime
  commentId: T:NodaTime.OffsetTime
  parent: NodaTime
  name: OffsetTime
  nameWithType: OffsetTime
  fullName: NodaTime.OffsetTime
- uid: NodaTime.OffsetTime.WithOffset*
  commentId: Overload:NodaTime.OffsetTime.WithOffset
  name: WithOffset
  nameWithType: OffsetTime.WithOffset
  fullName: NodaTime.OffsetTime.WithOffset
- uid: NodaTime.OffsetTime.With*
  commentId: Overload:NodaTime.OffsetTime.With
  name: With
  nameWithType: OffsetTime.With
  fullName: NodaTime.OffsetTime.With
- uid: System.Func{NodaTime.LocalTime,NodaTime.LocalTime}
  commentId: T:System.Func{NodaTime.LocalTime,NodaTime.LocalTime}
  parent: System
  definition: System.Func`2
  name: Func<LocalTime, LocalTime>
  nameWithType: Func<LocalTime, LocalTime>
  fullName: System.Func<NodaTime.LocalTime, NodaTime.LocalTime>
  nameWithType.vb: Func(Of LocalTime, LocalTime)
  fullName.vb: System.Func(Of NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: Func(Of LocalTime, LocalTime)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NodaTime.LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: NodaTime.LocalTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  parent: NodaTime
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
- uid: NodaTime.OffsetDateTime
  commentId: T:NodaTime.OffsetDateTime
  parent: NodaTime
  name: OffsetDateTime
  nameWithType: OffsetDateTime
  fullName: NodaTime.OffsetDateTime
- uid: NodaTime.OffsetTime.On*
  commentId: Overload:NodaTime.OffsetTime.On
  name: On
  nameWithType: OffsetTime.On
  fullName: NodaTime.OffsetTime.On
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.OffsetTime.GetHashCode*
  commentId: Overload:NodaTime.OffsetTime.GetHashCode
  name: GetHashCode
  nameWithType: OffsetTime.GetHashCode
  fullName: NodaTime.OffsetTime.GetHashCode
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.OffsetTime.Equals*
  commentId: Overload:NodaTime.OffsetTime.Equals
  name: Equals
  nameWithType: OffsetTime.Equals
  fullName: NodaTime.OffsetTime.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable{NodaTime.OffsetTime}.Equals(NodaTime.OffsetTime)
  commentId: M:System.IEquatable{NodaTime.OffsetTime}.Equals(NodaTime.OffsetTime)
  parent: System.IEquatable{NodaTime.OffsetTime}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(OffsetTime)
  nameWithType: IEquatable<OffsetTime>.Equals(OffsetTime)
  fullName: System.IEquatable<NodaTime.OffsetTime>.Equals(NodaTime.OffsetTime)
  nameWithType.vb: IEquatable(Of OffsetTime).Equals(OffsetTime)
  fullName.vb: System.IEquatable(Of NodaTime.OffsetTime).Equals(NodaTime.OffsetTime)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<OffsetTime>.Equals
    fullName: System.IEquatable<NodaTime.OffsetTime>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.OffsetTime
    name: OffsetTime
    nameWithType: OffsetTime
    fullName: NodaTime.OffsetTime
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of OffsetTime).Equals
    fullName: System.IEquatable(Of NodaTime.OffsetTime).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.OffsetTime
    name: OffsetTime
    nameWithType: OffsetTime
    fullName: NodaTime.OffsetTime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.OffsetTime.op_Equality*
  commentId: Overload:NodaTime.OffsetTime.op_Equality
  name: Equality
  nameWithType: OffsetTime.Equality
  fullName: NodaTime.OffsetTime.Equality
- uid: NodaTime.OffsetTime.op_Inequality*
  commentId: Overload:NodaTime.OffsetTime.op_Inequality
  name: Inequality
  nameWithType: OffsetTime.Inequality
  fullName: NodaTime.OffsetTime.Inequality
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.OffsetTime.ToString*
  commentId: Overload:NodaTime.OffsetTime.ToString
  name: ToString
  nameWithType: OffsetTime.ToString
  fullName: NodaTime.OffsetTime.ToString
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.OffsetTime.Deconstruct*
  commentId: Overload:NodaTime.OffsetTime.Deconstruct
  name: Deconstruct
  nameWithType: OffsetTime.Deconstruct
  fullName: NodaTime.OffsetTime.Deconstruct
- uid: System.Xml.Serialization.XmlSchemaExporter
  commentId: T:System.Xml.Serialization.XmlSchemaExporter
  isExternal: true
- uid: NodaTime.OffsetTime.AddSchema*
  commentId: Overload:NodaTime.OffsetTime.AddSchema
  name: AddSchema
  nameWithType: OffsetTime.AddSchema
  fullName: NodaTime.OffsetTime.AddSchema
- uid: System.Xml.Schema.XmlSchemaSet
  commentId: T:System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.XmlQualifiedName
  commentId: T:System.Xml.XmlQualifiedName
  parent: System.Xml
  isExternal: true
  name: XmlQualifiedName
  nameWithType: XmlQualifiedName
  fullName: System.Xml.XmlQualifiedName
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: NodaTime.OffsetTime.System#Xml#Serialization#IXmlSerializable#ReadXml*
  commentId: Overload:NodaTime.OffsetTime.System#Xml#Serialization#IXmlSerializable#ReadXml
  name: IXmlSerializable.ReadXml
  nameWithType: OffsetTime.IXmlSerializable.ReadXml
  fullName: NodaTime.OffsetTime.System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType.vb: OffsetTime.System.Xml.Serialization.IXmlSerializable.ReadXml
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: NodaTime.OffsetTime.System#Xml#Serialization#IXmlSerializable#WriteXml*
  commentId: Overload:NodaTime.OffsetTime.System#Xml#Serialization#IXmlSerializable#WriteXml
  name: IXmlSerializable.WriteXml
  nameWithType: OffsetTime.IXmlSerializable.WriteXml
  fullName: NodaTime.OffsetTime.System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType.vb: OffsetTime.System.Xml.Serialization.IXmlSerializable.WriteXml
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
shouldSkipMarkup: true
