### YamlMime:ManagedReference
items:
- uid: NodaTime.AnnualDate
  commentId: T:NodaTime.AnnualDate
  id: AnnualDate
  parent: NodaTime
  children:
  - NodaTime.AnnualDate.#ctor(System.Int32,System.Int32)
  - NodaTime.AnnualDate.AddSchema(System.Xml.Schema.XmlSchemaSet)
  - NodaTime.AnnualDate.CompareTo(NodaTime.AnnualDate)
  - NodaTime.AnnualDate.CompareTo(System.Object)
  - NodaTime.AnnualDate.Day
  - NodaTime.AnnualDate.Equals(NodaTime.AnnualDate)
  - NodaTime.AnnualDate.Equals(System.Object)
  - NodaTime.AnnualDate.GetHashCode
  - NodaTime.AnnualDate.InYear(System.Int32)
  - NodaTime.AnnualDate.IsValidYear(System.Int32)
  - NodaTime.AnnualDate.Month
  - NodaTime.AnnualDate.op_Equality(NodaTime.AnnualDate,NodaTime.AnnualDate)
  - NodaTime.AnnualDate.op_GreaterThan(NodaTime.AnnualDate,NodaTime.AnnualDate)
  - NodaTime.AnnualDate.op_GreaterThanOrEqual(NodaTime.AnnualDate,NodaTime.AnnualDate)
  - NodaTime.AnnualDate.op_Inequality(NodaTime.AnnualDate,NodaTime.AnnualDate)
  - NodaTime.AnnualDate.op_LessThan(NodaTime.AnnualDate,NodaTime.AnnualDate)
  - NodaTime.AnnualDate.op_LessThanOrEqual(NodaTime.AnnualDate,NodaTime.AnnualDate)
  - NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  - NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - NodaTime.AnnualDate.ToString
  - NodaTime.AnnualDate.ToString(System.String,System.IFormatProvider)
  langs:
  - csharp
  - vb
  name: AnnualDate
  nameWithType: AnnualDate
  fullName: NodaTime.AnnualDate
  type: Struct
  source:
    id: AnnualDate
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 33
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nRepresents an annual date (month and day) in the ISO calendar but without a specific year,\ntypically for recurrent events such as birthdays, anniversaries, and deadlines.\n"
  remarks: "\n<p>\nEquality and comparison order are defined in the natural way. Two values are equal if they\nrepresent the same month and the same day-of-month. One value is earlier than another if it\nhas a smaller month, or the same month but an earlier day-of-month.\n</p>\n<p>\nIn the future, this struct may be expanded to support other calendar systems,\nbut this does not generalize terribly cleanly, particularly to the Hebrew calendar system\nwith its leap month.\n</p>\n"
  example: []
  syntax:
    content: >-
      [TypeConverter(typeof(AnnualDateTypeConverter))]

      public struct AnnualDate : IEquatable<AnnualDate>, IComparable<AnnualDate>, IComparable, IFormattable, IXmlSerializable
    content.vb: >-
      <TypeConverter(GetType(AnnualDateTypeConverter))>

      Public Structure AnnualDate
          Implements IEquatable(Of AnnualDate), IComparable(Of AnnualDate), IComparable, IFormattable, IXmlSerializable
  implements:
  - System.IEquatable{NodaTime.AnnualDate}
  - System.IComparable{NodaTime.AnnualDate}
  - System.IComparable
  - System.IFormattable
  - System.Xml.Serialization.IXmlSerializable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: NodaTime.AnnualDate.#ctor(System.Int32,System.Int32)
  commentId: M:NodaTime.AnnualDate.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: AnnualDate(Int32, Int32)
  nameWithType: AnnualDate.AnnualDate(Int32, Int32)
  fullName: NodaTime.AnnualDate.AnnualDate(System.Int32, System.Int32)
  type: Constructor
  source:
    id: .ctor
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 52
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs an instance for the given month and day in the ISO calendar.\n"
  example: []
  syntax:
    content: public AnnualDate(int month, int day)
    parameters:
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    content.vb: Public Sub New(month As Integer, day As Integer)
  overload: NodaTime.AnnualDate.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      The parameters do not form a valid date.

      (February 29th is considered valid.)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.AnnualDate.Month
  commentId: P:NodaTime.AnnualDate.Month
  id: Month
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: Month
  nameWithType: AnnualDate.Month
  fullName: NodaTime.AnnualDate.Month
  type: Property
  source:
    id: Month
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 64
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the month of year.\n"
  example: []
  syntax:
    content: public int Month { get; }
    parameters: []
    return:
      type: System.Int32
      description: The month of year.
    content.vb: Public ReadOnly Property Month As Integer
  overload: NodaTime.AnnualDate.Month*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.AnnualDate.Day
  commentId: P:NodaTime.AnnualDate.Day
  id: Day
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: Day
  nameWithType: AnnualDate.Day
  fullName: NodaTime.AnnualDate.Day
  type: Property
  source:
    id: Day
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 70
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nGets the day of month.\n"
  example: []
  syntax:
    content: public int Day { get; }
    parameters: []
    return:
      type: System.Int32
      description: The day of month.
    content.vb: Public ReadOnly Property Day As Integer
  overload: NodaTime.AnnualDate.Day*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.AnnualDate.InYear(System.Int32)
  commentId: M:NodaTime.AnnualDate.InYear(System.Int32)
  id: InYear(System.Int32)
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: InYear(Int32)
  nameWithType: AnnualDate.InYear(Int32)
  fullName: NodaTime.AnnualDate.InYear(System.Int32)
  type: Method
  source:
    id: InYear
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 85
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns this annual date in a particular year, as a <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\nIf this value represents February 29th, and the specified year is not a leap\nyear, the returned value will be February 28th of that year. To see whether the\noriginal month and day is valid without truncation in a particular year,\nuse <xref href=\"NodaTime.AnnualDate.IsValidYear(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n"
  example: []
  syntax:
    content: public LocalDate InYear(int year)
    parameters:
    - id: year
      type: System.Int32
      description: The year component of the required date.
    return:
      type: NodaTime.LocalDate
      description: A date in the given year, suitable for this annual date.
    content.vb: Public Function InYear(year As Integer) As LocalDate
  overload: NodaTime.AnnualDate.InYear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.AnnualDate.IsValidYear(System.Int32)
  commentId: M:NodaTime.AnnualDate.IsValidYear(System.Int32)
  id: IsValidYear(System.Int32)
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: IsValidYear(Int32)
  nameWithType: AnnualDate.IsValidYear(Int32)
  fullName: NodaTime.AnnualDate.IsValidYear(System.Int32)
  type: Method
  source:
    id: IsValidYear
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 103
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nChecks whether the specified year forms a valid date with the month/day in this\nvalue, without any truncation. This will always return <code>true</code> except\nfor values representing February 29th, where the specified year is a non leap year.\n"
  example: []
  syntax:
    content: public bool IsValidYear(int year)
    parameters:
    - id: year
      type: System.Int32
      description: The year to test for validity
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if the current value occurs within the given year;

        <code>false</code> otherwise.
    content.vb: Public Function IsValidYear(year As Integer) As Boolean
  overload: NodaTime.AnnualDate.IsValidYear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.AnnualDate.Equals(System.Object)
  commentId: M:NodaTime.AnnualDate.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: AnnualDate.Equals(Object)
  fullName: NodaTime.AnnualDate.Equals(System.Object)
  type: Method
  source:
    id: Equals
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 112
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares this annual date with the specified reference.\nSee the type documentation for a description of equality semantics.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this one with
    return:
      type: System.Boolean
      description: True if the specified value is an annual date which is equal to this one; false otherwise
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.AnnualDate.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.AnnualDate.GetHashCode
  commentId: M:NodaTime.AnnualDate.GetHashCode
  id: GetHashCode
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: AnnualDate.GetHashCode()
  fullName: NodaTime.AnnualDate.GetHashCode()
  type: Method
  source:
    id: GetHashCode
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 119
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a hash code for this annual date.\nSee the type documentation for a description of equality semantics.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this annual date.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.AnnualDate.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.AnnualDate.ToString
  commentId: M:NodaTime.AnnualDate.ToString
  id: ToString
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: AnnualDate.ToString()
  fullName: NodaTime.AnnualDate.ToString()
  type: Method
  source:
    id: ToString
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 127
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nThe value of the current instance in the default format pattern (&quot;G&quot;).\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: NodaTime.AnnualDate.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.AnnualDate.ToString(System.String,System.IFormatProvider)
  commentId: M:NodaTime.AnnualDate.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: AnnualDate.ToString(String, IFormatProvider)
  fullName: NodaTime.AnnualDate.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    id: ToString
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 142
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nFormats the value of the current instance using the specified pattern.\n"
  example: []
  syntax:
    content: public string ToString(string patternText, IFormatProvider formatProvider)
    parameters:
    - id: patternText
      type: System.String
      description: >
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> specifying the pattern to use,

        or null to use the default format pattern (&quot;G&quot;).
    - id: formatProvider
      type: System.IFormatProvider
      description: >
        The <xref href="System.IFormatProvider" data-throw-if-not-resolved="false"></xref> to use when formatting the value,

        or null to use the current thread&apos;s culture to obtain a format provider.
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the value of the current instance in the specified format.\n"
    content.vb: Public Function ToString(patternText As String, formatProvider As IFormatProvider) As String
  overload: NodaTime.AnnualDate.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.AnnualDate.Equals(NodaTime.AnnualDate)
  commentId: M:NodaTime.AnnualDate.Equals(NodaTime.AnnualDate)
  id: Equals(NodaTime.AnnualDate)
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: Equals(AnnualDate)
  nameWithType: AnnualDate.Equals(AnnualDate)
  fullName: NodaTime.AnnualDate.Equals(NodaTime.AnnualDate)
  type: Method
  source:
    id: Equals
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 151
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares this annual date with the specified one for equality.\nSee the type documentation for a description of equality semantics.\n"
  example: []
  syntax:
    content: public bool Equals(AnnualDate other)
    parameters:
    - id: other
      type: NodaTime.AnnualDate
      description: The other annual date to compare this one with
    return:
      type: System.Boolean
      description: True if the specified annual date is equal to this one; false otherwise
    content.vb: Public Function Equals(other As AnnualDate) As Boolean
  overload: NodaTime.AnnualDate.Equals*
  implements:
  - System.IEquatable{NodaTime.AnnualDate}.Equals(NodaTime.AnnualDate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.AnnualDate.CompareTo(NodaTime.AnnualDate)
  commentId: M:NodaTime.AnnualDate.CompareTo(NodaTime.AnnualDate)
  id: CompareTo(NodaTime.AnnualDate)
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: CompareTo(AnnualDate)
  nameWithType: AnnualDate.CompareTo(AnnualDate)
  fullName: NodaTime.AnnualDate.CompareTo(NodaTime.AnnualDate)
  type: Method
  source:
    id: CompareTo
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 161
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nIndicates whether this annual date is earlier, later or the same as another one.\nSee the type documentation for a description of ordering semantics.\n"
  example: []
  syntax:
    content: public int CompareTo(AnnualDate other)
    parameters:
    - id: other
      type: NodaTime.AnnualDate
      description: The other annual date to compare this one with
    return:
      type: System.Int32
      description: >-
        A value less than zero if this annual date is earlier than <code data-dev-comment-type="paramref" class="paramref">other</code>;

        zero if this time is the same as <code data-dev-comment-type="paramref" class="paramref">other</code>; a value greater than zero if this annual date is

        later than <code data-dev-comment-type="paramref" class="paramref">other</code>.
    content.vb: Public Function CompareTo(other As AnnualDate) As Integer
  overload: NodaTime.AnnualDate.CompareTo*
  implements:
  - System.IComparable{NodaTime.AnnualDate}.CompareTo(NodaTime.AnnualDate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.AnnualDate.CompareTo(System.Object)
  commentId: M:NodaTime.AnnualDate.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: CompareTo(Object)
  nameWithType: AnnualDate.CompareTo(Object)
  fullName: NodaTime.AnnualDate.CompareTo(System.Object)
  type: Method
  source:
    id: CompareTo
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 176
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to compare two AnnualDates.\nSee the type documentation for a description of ordering semantics.\n"
  remarks: "\nThis uses explicit interface implementation to avoid it being called accidentally. The generic implementation should usually be preferred.\n"
  example: []
  syntax:
    content: public int CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this value with.
    return:
      type: System.Int32
      description: >
        The result of comparing this AnnualDate with another one.

        If <code data-dev-comment-type="paramref" class="paramref">obj</code> is null, this method returns a value greater than 0.
    content.vb: Public Function CompareTo(obj As Object) As Integer
  overload: NodaTime.AnnualDate.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref" class="paramref">obj</code> is non-null but does not refer to an instance of <xref href="NodaTime.AnnualDate" data-throw-if-not-resolved="false"></xref>
  implements:
  - System.IComparable.CompareTo(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.AnnualDate.op_Equality(NodaTime.AnnualDate,NodaTime.AnnualDate)
  commentId: M:NodaTime.AnnualDate.op_Equality(NodaTime.AnnualDate,NodaTime.AnnualDate)
  id: op_Equality(NodaTime.AnnualDate,NodaTime.AnnualDate)
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: Equality(AnnualDate, AnnualDate)
  nameWithType: AnnualDate.Equality(AnnualDate, AnnualDate)
  fullName: NodaTime.AnnualDate.Equality(NodaTime.AnnualDate, NodaTime.AnnualDate)
  type: Operator
  source:
    id: op_Equality
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 193
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.AnnualDate\" data-throw-if-not-resolved=\"false\"></xref> values for equality.\nSee the type documentation for a description of equality semantics.\n"
  example: []
  syntax:
    content: public static bool operator ==(AnnualDate lhs, AnnualDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.AnnualDate
      description: The first value to compare
    - id: rhs
      type: NodaTime.AnnualDate
      description: The second value to compare
    return:
      type: System.Boolean
      description: True if the two dates are the same; false otherwise
    content.vb: Public Shared Operator =(lhs As AnnualDate, rhs As AnnualDate) As Boolean
  overload: NodaTime.AnnualDate.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.AnnualDate.op_Inequality(NodaTime.AnnualDate,NodaTime.AnnualDate)
  commentId: M:NodaTime.AnnualDate.op_Inequality(NodaTime.AnnualDate,NodaTime.AnnualDate)
  id: op_Inequality(NodaTime.AnnualDate,NodaTime.AnnualDate)
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: Inequality(AnnualDate, AnnualDate)
  nameWithType: AnnualDate.Inequality(AnnualDate, AnnualDate)
  fullName: NodaTime.AnnualDate.Inequality(NodaTime.AnnualDate, NodaTime.AnnualDate)
  type: Operator
  source:
    id: op_Inequality
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 202
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.AnnualDate\" data-throw-if-not-resolved=\"false\"></xref> values for inequality.\nSee the type documentation for a description of equality semantics.\n"
  example: []
  syntax:
    content: public static bool operator !=(AnnualDate lhs, AnnualDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.AnnualDate
      description: The first value to compare
    - id: rhs
      type: NodaTime.AnnualDate
      description: The second value to compare
    return:
      type: System.Boolean
      description: False if the two dates are the same and in the same calendar; true otherwise
    content.vb: Public Shared Operator <>(lhs As AnnualDate, rhs As AnnualDate) As Boolean
  overload: NodaTime.AnnualDate.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.AnnualDate.op_LessThan(NodaTime.AnnualDate,NodaTime.AnnualDate)
  commentId: M:NodaTime.AnnualDate.op_LessThan(NodaTime.AnnualDate,NodaTime.AnnualDate)
  id: op_LessThan(NodaTime.AnnualDate,NodaTime.AnnualDate)
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: LessThan(AnnualDate, AnnualDate)
  nameWithType: AnnualDate.LessThan(AnnualDate, AnnualDate)
  fullName: NodaTime.AnnualDate.LessThan(NodaTime.AnnualDate, NodaTime.AnnualDate)
  type: Operator
  source:
    id: op_LessThan
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 213
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two annual dates to see if the left one is strictly earlier than the right one.\nSee the type documentation for a description of ordering semantics.\n"
  example: []
  syntax:
    content: public static bool operator <(AnnualDate lhs, AnnualDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.AnnualDate
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.AnnualDate
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is strictly earlier than <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator <(lhs As AnnualDate, rhs As AnnualDate) As Boolean
  overload: NodaTime.AnnualDate.op_LessThan*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code data-dev-comment-type="paramref" class="paramref">rhs</code> is not the same

      as the calendar of <code data-dev-comment-type="paramref" class="paramref">lhs</code>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.AnnualDate.op_LessThanOrEqual(NodaTime.AnnualDate,NodaTime.AnnualDate)
  commentId: M:NodaTime.AnnualDate.op_LessThanOrEqual(NodaTime.AnnualDate,NodaTime.AnnualDate)
  id: op_LessThanOrEqual(NodaTime.AnnualDate,NodaTime.AnnualDate)
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(AnnualDate, AnnualDate)
  nameWithType: AnnualDate.LessThanOrEqual(AnnualDate, AnnualDate)
  fullName: NodaTime.AnnualDate.LessThanOrEqual(NodaTime.AnnualDate, NodaTime.AnnualDate)
  type: Operator
  source:
    id: op_LessThanOrEqual
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 222
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two annual dates to see if the left one is earlier than or equal to the right one.\nSee the type documentation for a description of ordering semantics.\n"
  example: []
  syntax:
    content: public static bool operator <=(AnnualDate lhs, AnnualDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.AnnualDate
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.AnnualDate
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is earlier than or equal to <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator <=(lhs As AnnualDate, rhs As AnnualDate) As Boolean
  overload: NodaTime.AnnualDate.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.AnnualDate.op_GreaterThan(NodaTime.AnnualDate,NodaTime.AnnualDate)
  commentId: M:NodaTime.AnnualDate.op_GreaterThan(NodaTime.AnnualDate,NodaTime.AnnualDate)
  id: op_GreaterThan(NodaTime.AnnualDate,NodaTime.AnnualDate)
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: GreaterThan(AnnualDate, AnnualDate)
  nameWithType: AnnualDate.GreaterThan(AnnualDate, AnnualDate)
  fullName: NodaTime.AnnualDate.GreaterThan(NodaTime.AnnualDate, NodaTime.AnnualDate)
  type: Operator
  source:
    id: op_GreaterThan
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 231
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two annual dates to see if the left one is strictly later than the right one.\nSee the type documentation for a description of ordering semantics.\n"
  example: []
  syntax:
    content: public static bool operator>(AnnualDate lhs, AnnualDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.AnnualDate
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.AnnualDate
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is strictly later than <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator>(lhs As AnnualDate, rhs As AnnualDate) As Boolean
  overload: NodaTime.AnnualDate.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.AnnualDate.op_GreaterThanOrEqual(NodaTime.AnnualDate,NodaTime.AnnualDate)
  commentId: M:NodaTime.AnnualDate.op_GreaterThanOrEqual(NodaTime.AnnualDate,NodaTime.AnnualDate)
  id: op_GreaterThanOrEqual(NodaTime.AnnualDate,NodaTime.AnnualDate)
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(AnnualDate, AnnualDate)
  nameWithType: AnnualDate.GreaterThanOrEqual(AnnualDate, AnnualDate)
  fullName: NodaTime.AnnualDate.GreaterThanOrEqual(NodaTime.AnnualDate, NodaTime.AnnualDate)
  type: Operator
  source:
    id: op_GreaterThanOrEqual
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 240
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two annual dates to see if the left one is later than or equal to the right one.\nSee the type documentation for a description of ordering semantics.\n"
  example: []
  syntax:
    content: public static bool operator >=(AnnualDate lhs, AnnualDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.AnnualDate
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.AnnualDate
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is later than or equal to <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator >=(lhs As AnnualDate, rhs As AnnualDate) As Boolean
  overload: NodaTime.AnnualDate.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.AnnualDate.AddSchema(System.Xml.Schema.XmlSchemaSet)
  commentId: M:NodaTime.AnnualDate.AddSchema(System.Xml.Schema.XmlSchemaSet)
  id: AddSchema(System.Xml.Schema.XmlSchemaSet)
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: AddSchema(XmlSchemaSet)
  nameWithType: AnnualDate.AddSchema(XmlSchemaSet)
  fullName: NodaTime.AnnualDate.AddSchema(System.Xml.Schema.XmlSchemaSet)
  type: Method
  source:
    id: AddSchema
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 248
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds the XML schema type describing the structure of the <xref href=\"NodaTime.AnnualDate\" data-throw-if-not-resolved=\"false\"></xref> XML serialization to the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">xmlSchemaSet</code>.\n"
  example: []
  syntax:
    content: public static XmlQualifiedName AddSchema(XmlSchemaSet xmlSchemaSet)
    parameters:
    - id: xmlSchemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: The XML schema set provided by <xref href="System.Xml.Serialization.XmlSchemaExporter" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Xml.XmlQualifiedName
      description: The qualified name of the schema type that was added to the <code data-dev-comment-type="paramref" class="paramref">xmlSchemaSet</code>.
    content.vb: Public Shared Function AddSchema(xmlSchemaSet As XmlSchemaSet) As XmlQualifiedName
  overload: NodaTime.AnnualDate.AddSchema*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: IXmlSerializable.GetSchema()
  nameWithType: AnnualDate.IXmlSerializable.GetSchema()
  fullName: NodaTime.AnnualDate.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  source:
    id: System.Xml.Serialization.IXmlSerializable.GetSchema
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 251
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: XmlSchema IXmlSerializable.GetSchema()
    return:
      type: System.Xml.Schema.XmlSchema
    content.vb: Function System.Xml.Serialization.IXmlSerializable.GetSchema As XmlSchema Implements IXmlSerializable.GetSchema
  overload: NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#GetSchema*
  implements:
  - System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: AnnualDate.System.Xml.Serialization.IXmlSerializable.GetSchema()
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: AnnualDate.IXmlSerializable.ReadXml(XmlReader)
  fullName: NodaTime.AnnualDate.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  type: Method
  source:
    id: System.Xml.Serialization.IXmlSerializable.ReadXml
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 254
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.ReadXml(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.ReadXml(reader As XmlReader) Implements IXmlSerializable.ReadXml
  overload: NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: AnnualDate.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: NodaTime.AnnualDate
  langs:
  - csharp
  - vb
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: AnnualDate.IXmlSerializable.WriteXml(XmlWriter)
  fullName: NodaTime.AnnualDate.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    id: System.Xml.Serialization.IXmlSerializable.WriteXml
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\AnnualDate.cs
    startLine: 263
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.WriteXml(XmlWriter writer)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.WriteXml(writer As XmlWriter) Implements IXmlSerializable.WriteXml
  overload: NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: AnnualDate.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
references:
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.AnnualDate}
  commentId: T:System.IEquatable{NodaTime.AnnualDate}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<AnnualDate>
  nameWithType: IEquatable<AnnualDate>
  fullName: System.IEquatable<NodaTime.AnnualDate>
  nameWithType.vb: IEquatable(Of AnnualDate)
  fullName.vb: System.IEquatable(Of NodaTime.AnnualDate)
  name.vb: IEquatable(Of AnnualDate)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.AnnualDate
    name: AnnualDate
    nameWithType: AnnualDate
    fullName: NodaTime.AnnualDate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.AnnualDate
    name: AnnualDate
    nameWithType: AnnualDate
    fullName: NodaTime.AnnualDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{NodaTime.AnnualDate}
  commentId: T:System.IComparable{NodaTime.AnnualDate}
  parent: System
  definition: System.IComparable`1
  name: IComparable<AnnualDate>
  nameWithType: IComparable<AnnualDate>
  fullName: System.IComparable<NodaTime.AnnualDate>
  nameWithType.vb: IComparable(Of AnnualDate)
  fullName.vb: System.IComparable(Of NodaTime.AnnualDate)
  name.vb: IComparable(Of AnnualDate)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.AnnualDate
    name: AnnualDate
    nameWithType: AnnualDate
    fullName: NodaTime.AnnualDate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.AnnualDate
    name: AnnualDate
    nameWithType: AnnualDate
    fullName: NodaTime.AnnualDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.AnnualDate.#ctor*
  commentId: Overload:NodaTime.AnnualDate.#ctor
  name: AnnualDate
  nameWithType: AnnualDate.AnnualDate
  fullName: NodaTime.AnnualDate.AnnualDate
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.AnnualDate.Month*
  commentId: Overload:NodaTime.AnnualDate.Month
  name: Month
  nameWithType: AnnualDate.Month
  fullName: NodaTime.AnnualDate.Month
- uid: NodaTime.AnnualDate.Day*
  commentId: Overload:NodaTime.AnnualDate.Day
  name: Day
  nameWithType: AnnualDate.Day
  fullName: NodaTime.AnnualDate.Day
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  parent: NodaTime
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
- uid: NodaTime.AnnualDate.IsValidYear(System.Int32)
  commentId: M:NodaTime.AnnualDate.IsValidYear(System.Int32)
  isExternal: true
- uid: NodaTime.AnnualDate.InYear*
  commentId: Overload:NodaTime.AnnualDate.InYear
  name: InYear
  nameWithType: AnnualDate.InYear
  fullName: NodaTime.AnnualDate.InYear
- uid: NodaTime.AnnualDate.IsValidYear*
  commentId: Overload:NodaTime.AnnualDate.IsValidYear
  name: IsValidYear
  nameWithType: AnnualDate.IsValidYear
  fullName: NodaTime.AnnualDate.IsValidYear
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.AnnualDate.Equals*
  commentId: Overload:NodaTime.AnnualDate.Equals
  name: Equals
  nameWithType: AnnualDate.Equals
  fullName: NodaTime.AnnualDate.Equals
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.AnnualDate.GetHashCode*
  commentId: Overload:NodaTime.AnnualDate.GetHashCode
  name: GetHashCode
  nameWithType: AnnualDate.GetHashCode
  fullName: NodaTime.AnnualDate.GetHashCode
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.AnnualDate.ToString*
  commentId: Overload:NodaTime.AnnualDate.ToString
  name: ToString
  nameWithType: AnnualDate.ToString
  fullName: NodaTime.AnnualDate.ToString
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{NodaTime.AnnualDate}.Equals(NodaTime.AnnualDate)
  commentId: M:System.IEquatable{NodaTime.AnnualDate}.Equals(NodaTime.AnnualDate)
  parent: System.IEquatable{NodaTime.AnnualDate}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(AnnualDate)
  nameWithType: IEquatable<AnnualDate>.Equals(AnnualDate)
  fullName: System.IEquatable<NodaTime.AnnualDate>.Equals(NodaTime.AnnualDate)
  nameWithType.vb: IEquatable(Of AnnualDate).Equals(AnnualDate)
  fullName.vb: System.IEquatable(Of NodaTime.AnnualDate).Equals(NodaTime.AnnualDate)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<AnnualDate>.Equals
    fullName: System.IEquatable<NodaTime.AnnualDate>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.AnnualDate
    name: AnnualDate
    nameWithType: AnnualDate
    fullName: NodaTime.AnnualDate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of AnnualDate).Equals
    fullName: System.IEquatable(Of NodaTime.AnnualDate).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.AnnualDate
    name: AnnualDate
    nameWithType: AnnualDate
    fullName: NodaTime.AnnualDate
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.AnnualDate
  commentId: T:NodaTime.AnnualDate
  parent: NodaTime
  name: AnnualDate
  nameWithType: AnnualDate
  fullName: NodaTime.AnnualDate
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.AnnualDate.CompareTo*
  commentId: Overload:NodaTime.AnnualDate.CompareTo
  name: CompareTo
  nameWithType: AnnualDate.CompareTo
  fullName: NodaTime.AnnualDate.CompareTo
- uid: System.IComparable{NodaTime.AnnualDate}.CompareTo(NodaTime.AnnualDate)
  commentId: M:System.IComparable{NodaTime.AnnualDate}.CompareTo(NodaTime.AnnualDate)
  parent: System.IComparable{NodaTime.AnnualDate}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(AnnualDate)
  nameWithType: IComparable<AnnualDate>.CompareTo(AnnualDate)
  fullName: System.IComparable<NodaTime.AnnualDate>.CompareTo(NodaTime.AnnualDate)
  nameWithType.vb: IComparable(Of AnnualDate).CompareTo(AnnualDate)
  fullName.vb: System.IComparable(Of NodaTime.AnnualDate).CompareTo(NodaTime.AnnualDate)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<AnnualDate>.CompareTo
    fullName: System.IComparable<NodaTime.AnnualDate>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.AnnualDate
    name: AnnualDate
    nameWithType: AnnualDate
    fullName: NodaTime.AnnualDate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of AnnualDate).CompareTo
    fullName: System.IComparable(Of NodaTime.AnnualDate).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.AnnualDate
    name: AnnualDate
    nameWithType: AnnualDate
    fullName: NodaTime.AnnualDate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NodaTime.AnnualDate.op_Equality*
  commentId: Overload:NodaTime.AnnualDate.op_Equality
  name: Equality
  nameWithType: AnnualDate.Equality
  fullName: NodaTime.AnnualDate.Equality
- uid: NodaTime.AnnualDate.op_Inequality*
  commentId: Overload:NodaTime.AnnualDate.op_Inequality
  name: Inequality
  nameWithType: AnnualDate.Inequality
  fullName: NodaTime.AnnualDate.Inequality
- uid: NodaTime.AnnualDate.op_LessThan*
  commentId: Overload:NodaTime.AnnualDate.op_LessThan
  name: LessThan
  nameWithType: AnnualDate.LessThan
  fullName: NodaTime.AnnualDate.LessThan
- uid: NodaTime.AnnualDate.op_LessThanOrEqual*
  commentId: Overload:NodaTime.AnnualDate.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: AnnualDate.LessThanOrEqual
  fullName: NodaTime.AnnualDate.LessThanOrEqual
- uid: NodaTime.AnnualDate.op_GreaterThan*
  commentId: Overload:NodaTime.AnnualDate.op_GreaterThan
  name: GreaterThan
  nameWithType: AnnualDate.GreaterThan
  fullName: NodaTime.AnnualDate.GreaterThan
- uid: NodaTime.AnnualDate.op_GreaterThanOrEqual*
  commentId: Overload:NodaTime.AnnualDate.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: AnnualDate.GreaterThanOrEqual
  fullName: NodaTime.AnnualDate.GreaterThanOrEqual
- uid: System.Xml.Serialization.XmlSchemaExporter
  commentId: T:System.Xml.Serialization.XmlSchemaExporter
  isExternal: true
- uid: NodaTime.AnnualDate.AddSchema*
  commentId: Overload:NodaTime.AnnualDate.AddSchema
  name: AddSchema
  nameWithType: AnnualDate.AddSchema
  fullName: NodaTime.AnnualDate.AddSchema
- uid: System.Xml.Schema.XmlSchemaSet
  commentId: T:System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.XmlQualifiedName
  commentId: T:System.Xml.XmlQualifiedName
  parent: System.Xml
  isExternal: true
  name: XmlQualifiedName
  nameWithType: XmlQualifiedName
  fullName: System.Xml.XmlQualifiedName
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#GetSchema*
  commentId: Overload:NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  name: IXmlSerializable.GetSchema
  nameWithType: AnnualDate.IXmlSerializable.GetSchema
  fullName: NodaTime.AnnualDate.System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: AnnualDate.System.Xml.Serialization.IXmlSerializable.GetSchema
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Xml.Serialization.IXmlSerializable.GetSchema
  commentId: M:System.Xml.Serialization.IXmlSerializable.GetSchema
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: GetSchema()
  nameWithType: IXmlSerializable.GetSchema()
  fullName: System.Xml.Serialization.IXmlSerializable.GetSchema()
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#ReadXml*
  commentId: Overload:NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#ReadXml
  name: IXmlSerializable.ReadXml
  nameWithType: AnnualDate.IXmlSerializable.ReadXml
  fullName: NodaTime.AnnualDate.System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType.vb: AnnualDate.System.Xml.Serialization.IXmlSerializable.ReadXml
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#WriteXml*
  commentId: Overload:NodaTime.AnnualDate.System#Xml#Serialization#IXmlSerializable#WriteXml
  name: IXmlSerializable.WriteXml
  nameWithType: AnnualDate.IXmlSerializable.WriteXml
  fullName: NodaTime.AnnualDate.System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType.vb: AnnualDate.System.Xml.Serialization.IXmlSerializable.WriteXml
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
shouldSkipMarkup: true
