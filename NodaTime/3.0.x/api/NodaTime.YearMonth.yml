### YamlMime:ManagedReference
items:
- uid: NodaTime.YearMonth
  commentId: T:NodaTime.YearMonth
  id: YearMonth
  parent: NodaTime
  children:
  - NodaTime.YearMonth.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32)
  - NodaTime.YearMonth.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,NodaTime.CalendarSystem)
  - NodaTime.YearMonth.#ctor(System.Int32,System.Int32)
  - NodaTime.YearMonth.#ctor(System.Int32,System.Int32,NodaTime.CalendarSystem)
  - NodaTime.YearMonth.AddSchema(System.Xml.Schema.XmlSchemaSet)
  - NodaTime.YearMonth.Calendar
  - NodaTime.YearMonth.CompareTo(NodaTime.YearMonth)
  - NodaTime.YearMonth.Equals(NodaTime.YearMonth)
  - NodaTime.YearMonth.Equals(System.Object)
  - NodaTime.YearMonth.Era
  - NodaTime.YearMonth.GetHashCode
  - NodaTime.YearMonth.Month
  - NodaTime.YearMonth.OnDayOfMonth(System.Int32)
  - NodaTime.YearMonth.op_Equality(NodaTime.YearMonth,NodaTime.YearMonth)
  - NodaTime.YearMonth.op_GreaterThan(NodaTime.YearMonth,NodaTime.YearMonth)
  - NodaTime.YearMonth.op_GreaterThanOrEqual(NodaTime.YearMonth,NodaTime.YearMonth)
  - NodaTime.YearMonth.op_Inequality(NodaTime.YearMonth,NodaTime.YearMonth)
  - NodaTime.YearMonth.op_LessThan(NodaTime.YearMonth,NodaTime.YearMonth)
  - NodaTime.YearMonth.op_LessThanOrEqual(NodaTime.YearMonth,NodaTime.YearMonth)
  - NodaTime.YearMonth.System#IComparable#CompareTo(System.Object)
  - NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#GetSchema
  - NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - NodaTime.YearMonth.ToDateInterval
  - NodaTime.YearMonth.ToString(System.String,System.IFormatProvider)
  - NodaTime.YearMonth.Year
  - NodaTime.YearMonth.YearOfEra
  langs:
  - csharp
  - vb
  name: YearMonth
  nameWithType: YearMonth
  fullName: NodaTime.YearMonth
  type: Struct
  source:
    id: YearMonth
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 32
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nA year and month in a particular calendar. This is effectively\n<xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> without the day-of-month component.\n"
  remarks: "\n<p>\nValues can freely be compared for equality: a value in a different calendar system is not equal to\na value in a different calendar system. However, ordering comparisons\nfail with <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>; attempting to compare values in different calendars\nalmost always indicates a bug in the calling code.\n</p>\n"
  example: []
  syntax:
    content: >-
      [TypeConverter(typeof(YearMonthTypeConverter))]

      public struct YearMonth : IEquatable<YearMonth>, IComparable<YearMonth>, IComparable, IFormattable, IXmlSerializable
    content.vb: >-
      <TypeConverter(GetType(YearMonthTypeConverter))>

      Public Structure YearMonth
          Implements IEquatable(Of YearMonth), IComparable(Of YearMonth), IComparable, IFormattable, IXmlSerializable
  implements:
  - System.IEquatable{NodaTime.YearMonth}
  - System.IComparable{NodaTime.YearMonth}
  - System.IComparable
  - System.IFormattable
  - System.Xml.Serialization.IXmlSerializable
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: NodaTime.YearMonth.Calendar
  commentId: P:NodaTime.YearMonth.Calendar
  id: Calendar
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: Calendar
  nameWithType: YearMonth.Calendar
  fullName: NodaTime.YearMonth.Calendar
  type: Property
  source:
    id: Calendar
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 45
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the calendar system associated with this year/month.
  example: []
  syntax:
    content: public CalendarSystem Calendar { get; }
    parameters: []
    return:
      type: NodaTime.CalendarSystem
      description: The calendar system associated with this year/month.
    content.vb: Public ReadOnly Property Calendar As CalendarSystem
  overload: NodaTime.YearMonth.Calendar*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.YearMonth.Year
  commentId: P:NodaTime.YearMonth.Year
  id: Year
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: Year
  nameWithType: YearMonth.Year
  fullName: NodaTime.YearMonth.Year
  type: Property
  source:
    id: Year
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 53
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this year/month.
  remarks: >-
    This returns the &quot;absolute year&quot;, so, for the ISO calendar,

    a value of 0 means 1 BC, for example.
  example: []
  syntax:
    content: public int Year { get; }
    parameters: []
    return:
      type: System.Int32
      description: The year of this year/month.
    content.vb: Public ReadOnly Property Year As Integer
  overload: NodaTime.YearMonth.Year*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.YearMonth.Month
  commentId: P:NodaTime.YearMonth.Month
  id: Month
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: Month
  nameWithType: YearMonth.Month
  fullName: NodaTime.YearMonth.Month
  type: Property
  source:
    id: Month
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 57
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the month of this year/month within the year.
  example: []
  syntax:
    content: public int Month { get; }
    parameters: []
    return:
      type: System.Int32
      description: The month of this year/month within the year.
    content.vb: Public ReadOnly Property Month As Integer
  overload: NodaTime.YearMonth.Month*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.YearMonth.YearOfEra
  commentId: P:NodaTime.YearMonth.YearOfEra
  id: YearOfEra
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: YearOfEra
  nameWithType: YearMonth.YearOfEra
  fullName: NodaTime.YearMonth.YearOfEra
  type: Property
  source:
    id: YearOfEra
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 61
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this value within the era.
  example: []
  syntax:
    content: public int YearOfEra { get; }
    parameters: []
    return:
      type: System.Int32
      description: The year of this value within the era.
    content.vb: Public ReadOnly Property YearOfEra As Integer
  overload: NodaTime.YearMonth.YearOfEra*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.YearMonth.Era
  commentId: P:NodaTime.YearMonth.Era
  id: Era
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: Era
  nameWithType: YearMonth.Era
  fullName: NodaTime.YearMonth.Era
  type: Property
  source:
    id: Era
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 65
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the era of this year/month.
  example: []
  syntax:
    content: public Era Era { get; }
    parameters: []
    return:
      type: NodaTime.Calendars.Era
      description: The era of this year/month.
    content.vb: Public ReadOnly Property Era As Era
  overload: NodaTime.YearMonth.Era*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.YearMonth.#ctor(System.Int32,System.Int32)
  commentId: M:NodaTime.YearMonth.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: YearMonth(Int32, Int32)
  nameWithType: YearMonth.YearMonth(Int32, Int32)
  fullName: NodaTime.YearMonth.YearMonth(System.Int32, System.Int32)
  type: Constructor
  source:
    id: .ctor
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 87
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs an instance for the given year and month in the ISO calendar.\n"
  example: []
  syntax:
    content: public YearMonth(int year, int month)
    parameters:
    - id: year
      type: System.Int32
      description: The year. This is the &quot;absolute year&quot;, so a value of 0 means 1 BC, for example.
    - id: month
      type: System.Int32
      description: The month of year.
    content.vb: Public Sub New(year As Integer, month As Integer)
  overload: NodaTime.YearMonth.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid year/month.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.YearMonth.#ctor(System.Int32,System.Int32,NodaTime.CalendarSystem)
  commentId: M:NodaTime.YearMonth.#ctor(System.Int32,System.Int32,NodaTime.CalendarSystem)
  id: '#ctor(System.Int32,System.Int32,NodaTime.CalendarSystem)'
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: YearMonth(Int32, Int32, CalendarSystem)
  nameWithType: YearMonth.YearMonth(Int32, Int32, CalendarSystem)
  fullName: NodaTime.YearMonth.YearMonth(System.Int32, System.Int32, NodaTime.CalendarSystem)
  type: Constructor
  source:
    id: .ctor
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 107
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs an instance for the given year, month and day in the specified calendar.\n"
  example: []
  syntax:
    content: public YearMonth(int year, int month, CalendarSystem calendar)
    parameters:
    - id: year
      type: System.Int32
      description: >-
        The year. This is the &quot;absolute year&quot;, so, for

        the ISO calendar, a value of 0 means 1 BC, for example.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: calendar
      type: NodaTime.CalendarSystem
      description: Calendar system in which to create the year/month.
    content.vb: Public Sub New(year As Integer, month As Integer, calendar As CalendarSystem)
  overload: NodaTime.YearMonth.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid year/month.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.YearMonth.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32)
  commentId: M:NodaTime.YearMonth.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32)
  id: '#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32)'
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: YearMonth(Era, Int32, Int32)
  nameWithType: YearMonth.YearMonth(Era, Int32, Int32)
  fullName: NodaTime.YearMonth.YearMonth(NodaTime.Calendars.Era, System.Int32, System.Int32)
  type: Constructor
  source:
    id: .ctor
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 122
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs an instance for the given era, year of era and month in the ISO calendar.\n"
  example: []
  syntax:
    content: public YearMonth(Era era, int yearOfEra, int month)
    parameters:
    - id: era
      type: NodaTime.Calendars.Era
      description: The era within which to create a year/month. Must be a valid era within the ISO calendar.
    - id: yearOfEra
      type: System.Int32
      description: The year of era.
    - id: month
      type: System.Int32
      description: The month of year.
    content.vb: Public Sub New(era As Era, yearOfEra As Integer, month As Integer)
  overload: NodaTime.YearMonth.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid year/month.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.YearMonth.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,NodaTime.CalendarSystem)
  commentId: M:NodaTime.YearMonth.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,NodaTime.CalendarSystem)
  id: '#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,NodaTime.CalendarSystem)'
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: YearMonth(Era, Int32, Int32, CalendarSystem)
  nameWithType: YearMonth.YearMonth(Era, Int32, Int32, CalendarSystem)
  fullName: NodaTime.YearMonth.YearMonth(NodaTime.Calendars.Era, System.Int32, System.Int32, NodaTime.CalendarSystem)
  type: Constructor
  source:
    id: .ctor
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 136
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nConstructs an instance for the given era, year of era and month in the specified calendar.\n"
  example: []
  syntax:
    content: public YearMonth(Era era, int yearOfEra, int month, CalendarSystem calendar)
    parameters:
    - id: era
      type: NodaTime.Calendars.Era
      description: The era within which to create a year/month. Must be a valid era within the specified calendar.
    - id: yearOfEra
      type: System.Int32
      description: The year of era.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: calendar
      type: NodaTime.CalendarSystem
      description: Calendar system in which to create the year/month.
    content.vb: Public Sub New(era As Era, yearOfEra As Integer, month As Integer, calendar As CalendarSystem)
  overload: NodaTime.YearMonth.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid year/month.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.YearMonth.ToDateInterval
  commentId: M:NodaTime.YearMonth.ToDateInterval
  id: ToDateInterval
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: ToDateInterval()
  nameWithType: YearMonth.ToDateInterval()
  fullName: NodaTime.YearMonth.ToDateInterval()
  type: Method
  source:
    id: ToDateInterval
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 145
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"NodaTime.DateInterval\" data-throw-if-not-resolved=\"false\"></xref> covering the month represented by this value.\n"
  example: []
  syntax:
    content: public DateInterval ToDateInterval()
    return:
      type: NodaTime.DateInterval
      description: A <xref href="NodaTime.DateInterval" data-throw-if-not-resolved="false"></xref> covering the month represented by this value.
    content.vb: Public Function ToDateInterval As DateInterval
  overload: NodaTime.YearMonth.ToDateInterval*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.YearMonth.OnDayOfMonth(System.Int32)
  commentId: M:NodaTime.YearMonth.OnDayOfMonth(System.Int32)
  id: OnDayOfMonth(System.Int32)
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: OnDayOfMonth(Int32)
  nameWithType: YearMonth.OnDayOfMonth(Int32)
  fullName: NodaTime.YearMonth.OnDayOfMonth(System.Int32)
  type: Method
  source:
    id: OnDayOfMonth
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 155
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref> with the year/month of this value, and the given day of month.\n"
  example: []
  syntax:
    content: public LocalDate OnDayOfMonth(int day)
    parameters:
    - id: day
      type: System.Int32
      description: The day within the month.
    return:
      type: NodaTime.LocalDate
      description: The result of combining this year and month with <code data-dev-comment-type="paramref" class="paramref">day</code>.
    content.vb: Public Function OnDayOfMonth(day As Integer) As LocalDate
  overload: NodaTime.YearMonth.OnDayOfMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      <code data-dev-comment-type="paramref" class="paramref">day</code> does not fall within the
          month represented by this value.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.YearMonth.CompareTo(NodaTime.YearMonth)
  commentId: M:NodaTime.YearMonth.CompareTo(NodaTime.YearMonth)
  id: CompareTo(NodaTime.YearMonth)
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: CompareTo(YearMonth)
  nameWithType: YearMonth.CompareTo(YearMonth)
  fullName: NodaTime.YearMonth.CompareTo(NodaTime.YearMonth)
  type: Method
  source:
    id: CompareTo
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 172
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nIndicates whether this year/month is earlier, later or the same as another one.\nSee the type documentation for a description of ordering semantics.\n"
  example: []
  syntax:
    content: public int CompareTo(YearMonth other)
    parameters:
    - id: other
      type: NodaTime.YearMonth
      description: The other year/month to compare this one with
    return:
      type: System.Int32
      description: >-
        A value less than zero if this year/month is earlier than <code data-dev-comment-type="paramref" class="paramref">other</code>;

        zero if this year/month is the same as <code data-dev-comment-type="paramref" class="paramref">other</code>; a value greater than zero if this date is

        later than <code data-dev-comment-type="paramref" class="paramref">other</code>.
    content.vb: Public Function CompareTo(other As YearMonth) As Integer
  overload: NodaTime.YearMonth.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code data-dev-comment-type="paramref" class="paramref">other</code> is not the

      same as the calendar system of this value.
  implements:
  - System.IComparable{NodaTime.YearMonth}.CompareTo(NodaTime.YearMonth)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.YearMonth.System#IComparable#CompareTo(System.Object)
  commentId: M:NodaTime.YearMonth.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  nameWithType: YearMonth.IComparable.CompareTo(Object)
  fullName: NodaTime.YearMonth.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    id: System.IComparable.CompareTo
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 197
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nImplementation of <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to compare two YearMonth values.\nSee the type documentation for a description of ordering semantics.\n"
  remarks: "\nThis uses explicit interface implementation to avoid it being called accidentally. The generic implementation should usually be preferred.\n"
  example: []
  syntax:
    content: int IComparable.CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this value with.
    return:
      type: System.Int32
      description: >
        The result of comparing this YearMonth with another one.

        If <code data-dev-comment-type="paramref" class="paramref">obj</code> is null, this method returns a value greater than 0.
    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo
  overload: NodaTime.YearMonth.System#IComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      <code data-dev-comment-type="paramref" class="paramref">obj</code> is non-null but does not refer to an instance of <xref href="NodaTime.YearMonth" data-throw-if-not-resolved="false"></xref>, or refers
          to a value in a different calendar system.
  implements:
  - System.IComparable.CompareTo(System.Object)
  nameWithType.vb: YearMonth.System.IComparable.CompareTo(Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: NodaTime.YearMonth.op_LessThan(NodaTime.YearMonth,NodaTime.YearMonth)
  commentId: M:NodaTime.YearMonth.op_LessThan(NodaTime.YearMonth,NodaTime.YearMonth)
  id: op_LessThan(NodaTime.YearMonth,NodaTime.YearMonth)
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: LessThan(YearMonth, YearMonth)
  nameWithType: YearMonth.LessThan(YearMonth, YearMonth)
  fullName: NodaTime.YearMonth.LessThan(NodaTime.YearMonth, NodaTime.YearMonth)
  type: Operator
  source:
    id: op_LessThan
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 216
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two YearMonth values to see if the left one is strictly earlier than the right one.\nSee the type documentation for a description of ordering semantics.\n"
  example: []
  syntax:
    content: public static bool operator <(YearMonth lhs, YearMonth rhs)
    parameters:
    - id: lhs
      type: NodaTime.YearMonth
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.YearMonth
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is strictly earlier than <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator <(lhs As YearMonth, rhs As YearMonth) As Boolean
  overload: NodaTime.YearMonth.op_LessThan*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code data-dev-comment-type="paramref" class="paramref">rhs</code> is not the same

      as the calendar of <code data-dev-comment-type="paramref" class="paramref">lhs</code>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.YearMonth.op_LessThanOrEqual(NodaTime.YearMonth,NodaTime.YearMonth)
  commentId: M:NodaTime.YearMonth.op_LessThanOrEqual(NodaTime.YearMonth,NodaTime.YearMonth)
  id: op_LessThanOrEqual(NodaTime.YearMonth,NodaTime.YearMonth)
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(YearMonth, YearMonth)
  nameWithType: YearMonth.LessThanOrEqual(YearMonth, YearMonth)
  fullName: NodaTime.YearMonth.LessThanOrEqual(NodaTime.YearMonth, NodaTime.YearMonth)
  type: Operator
  source:
    id: op_LessThanOrEqual
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 231
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two YearMonth values to see if the left one is earlier than or equal to the right one.\nSee the type documentation for a description of ordering semantics.\n"
  example: []
  syntax:
    content: public static bool operator <=(YearMonth lhs, YearMonth rhs)
    parameters:
    - id: lhs
      type: NodaTime.YearMonth
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.YearMonth
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is earlier than or equal to <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator <=(lhs As YearMonth, rhs As YearMonth) As Boolean
  overload: NodaTime.YearMonth.op_LessThanOrEqual*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code data-dev-comment-type="paramref" class="paramref">rhs</code> is not the same

      as the calendar of <code data-dev-comment-type="paramref" class="paramref">lhs</code>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.YearMonth.op_GreaterThan(NodaTime.YearMonth,NodaTime.YearMonth)
  commentId: M:NodaTime.YearMonth.op_GreaterThan(NodaTime.YearMonth,NodaTime.YearMonth)
  id: op_GreaterThan(NodaTime.YearMonth,NodaTime.YearMonth)
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: GreaterThan(YearMonth, YearMonth)
  nameWithType: YearMonth.GreaterThan(YearMonth, YearMonth)
  fullName: NodaTime.YearMonth.GreaterThan(NodaTime.YearMonth, NodaTime.YearMonth)
  type: Operator
  source:
    id: op_GreaterThan
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 246
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two YearMonth values to see if the left one is strictly later than the right one.\nSee the type documentation for a description of ordering semantics.\n"
  example: []
  syntax:
    content: public static bool operator>(YearMonth lhs, YearMonth rhs)
    parameters:
    - id: lhs
      type: NodaTime.YearMonth
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.YearMonth
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is strictly later than <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator>(lhs As YearMonth, rhs As YearMonth) As Boolean
  overload: NodaTime.YearMonth.op_GreaterThan*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code data-dev-comment-type="paramref" class="paramref">rhs</code> is not the same

      as the calendar of <code data-dev-comment-type="paramref" class="paramref">lhs</code>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.YearMonth.op_GreaterThanOrEqual(NodaTime.YearMonth,NodaTime.YearMonth)
  commentId: M:NodaTime.YearMonth.op_GreaterThanOrEqual(NodaTime.YearMonth,NodaTime.YearMonth)
  id: op_GreaterThanOrEqual(NodaTime.YearMonth,NodaTime.YearMonth)
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(YearMonth, YearMonth)
  nameWithType: YearMonth.GreaterThanOrEqual(YearMonth, YearMonth)
  fullName: NodaTime.YearMonth.GreaterThanOrEqual(NodaTime.YearMonth, NodaTime.YearMonth)
  type: Operator
  source:
    id: op_GreaterThanOrEqual
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 261
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two YearMonth values to see if the left one is later than or equal to the right one.\nSee the type documentation for a description of ordering semantics.\n"
  example: []
  syntax:
    content: public static bool operator >=(YearMonth lhs, YearMonth rhs)
    parameters:
    - id: lhs
      type: NodaTime.YearMonth
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.YearMonth
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code data-dev-comment-type="paramref" class="paramref">lhs</code> is later than or equal to <code data-dev-comment-type="paramref" class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator >=(lhs As YearMonth, rhs As YearMonth) As Boolean
  overload: NodaTime.YearMonth.op_GreaterThanOrEqual*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code data-dev-comment-type="paramref" class="paramref">rhs</code> is not the same

      as the calendar of <code data-dev-comment-type="paramref" class="paramref">lhs</code>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.YearMonth.GetHashCode
  commentId: M:NodaTime.YearMonth.GetHashCode
  id: GetHashCode
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: YearMonth.GetHashCode()
  fullName: NodaTime.YearMonth.GetHashCode()
  type: Method
  source:
    id: GetHashCode
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 272
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nReturns a hash code for this year/month.\nSee the type documentation for a description of equality semantics.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this value.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.YearMonth.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.YearMonth.Equals(System.Object)
  commentId: M:NodaTime.YearMonth.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: YearMonth.Equals(Object)
  fullName: NodaTime.YearMonth.Equals(System.Object)
  type: Method
  source:
    id: Equals
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 280
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.YearMonth\" data-throw-if-not-resolved=\"false\"></xref> values for equality.\nSee the type documentation for a description of equality semantics.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this year/month with.
    return:
      type: System.Boolean
      description: True if the given value is another year/month equal to this one; false otherwise.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.YearMonth.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NodaTime.YearMonth.Equals(NodaTime.YearMonth)
  commentId: M:NodaTime.YearMonth.Equals(NodaTime.YearMonth)
  id: Equals(NodaTime.YearMonth)
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: Equals(YearMonth)
  nameWithType: YearMonth.Equals(YearMonth)
  fullName: NodaTime.YearMonth.Equals(NodaTime.YearMonth)
  type: Method
  source:
    id: Equals
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 288
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.YearMonth\" data-throw-if-not-resolved=\"false\"></xref> values for equality.\nSee the type documentation for a description of ordering semantics.\n"
  example: []
  syntax:
    content: public bool Equals(YearMonth other)
    parameters:
    - id: other
      type: NodaTime.YearMonth
      description: The value to compare this year/month with.
    return:
      type: System.Boolean
      description: True if the given value is another year/month equal to this one; false otherwise.
    content.vb: Public Function Equals(other As YearMonth) As Boolean
  overload: NodaTime.YearMonth.Equals*
  implements:
  - System.IEquatable{NodaTime.YearMonth}.Equals(NodaTime.YearMonth)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.YearMonth.op_Equality(NodaTime.YearMonth,NodaTime.YearMonth)
  commentId: M:NodaTime.YearMonth.op_Equality(NodaTime.YearMonth,NodaTime.YearMonth)
  id: op_Equality(NodaTime.YearMonth,NodaTime.YearMonth)
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: Equality(YearMonth, YearMonth)
  nameWithType: YearMonth.Equality(YearMonth, YearMonth)
  fullName: NodaTime.YearMonth.Equality(NodaTime.YearMonth, NodaTime.YearMonth)
  type: Operator
  source:
    id: op_Equality
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 297
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.YearMonth\" data-throw-if-not-resolved=\"false\"></xref> values for equality.\nSee the type documentation for a description of equality semantics.\n"
  example: []
  syntax:
    content: public static bool operator ==(YearMonth lhs, YearMonth rhs)
    parameters:
    - id: lhs
      type: NodaTime.YearMonth
      description: The first value to compare
    - id: rhs
      type: NodaTime.YearMonth
      description: The second value to compare
    return:
      type: System.Boolean
      description: True if the two year/month values are the same and in the same calendar; false otherwise
    content.vb: Public Shared Operator =(lhs As YearMonth, rhs As YearMonth) As Boolean
  overload: NodaTime.YearMonth.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.YearMonth.op_Inequality(NodaTime.YearMonth,NodaTime.YearMonth)
  commentId: M:NodaTime.YearMonth.op_Inequality(NodaTime.YearMonth,NodaTime.YearMonth)
  id: op_Inequality(NodaTime.YearMonth,NodaTime.YearMonth)
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: Inequality(YearMonth, YearMonth)
  nameWithType: YearMonth.Inequality(YearMonth, YearMonth)
  fullName: NodaTime.YearMonth.Inequality(NodaTime.YearMonth, NodaTime.YearMonth)
  type: Operator
  source:
    id: op_Inequality
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 306
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nCompares two <xref href=\"NodaTime.YearMonth\" data-throw-if-not-resolved=\"false\"></xref> values for inequality.\nSee the type documentation for a description of equality semantics.\n"
  example: []
  syntax:
    content: public static bool operator !=(YearMonth lhs, YearMonth rhs)
    parameters:
    - id: lhs
      type: NodaTime.YearMonth
      description: The first value to compare
    - id: rhs
      type: NodaTime.YearMonth
      description: The second value to compare
    return:
      type: System.Boolean
      description: False if the two year/month values are the same and in the same calendar; true otherwise
    content.vb: Public Shared Operator <>(lhs As YearMonth, rhs As YearMonth) As Boolean
  overload: NodaTime.YearMonth.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.YearMonth.ToString(System.String,System.IFormatProvider)
  commentId: M:NodaTime.YearMonth.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: YearMonth.ToString(String, IFormatProvider)
  fullName: NodaTime.YearMonth.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    id: ToString
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 321
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nFormats the value of the current instance using the specified pattern.\n"
  example: []
  syntax:
    content: public string ToString(string patternText, IFormatProvider formatProvider)
    parameters:
    - id: patternText
      type: System.String
      description: >
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> specifying the pattern to use,

        or null to use the default format pattern (&quot;D&quot;).
    - id: formatProvider
      type: System.IFormatProvider
      description: >
        The <xref href="System.IFormatProvider" data-throw-if-not-resolved="false"></xref> to use when formatting the value,

        or null to use the current thread&apos;s culture to obtain a format provider.
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the value of the current instance in the specified format.\n"
    content.vb: Public Function ToString(patternText As String, formatProvider As IFormatProvider) As String
  overload: NodaTime.YearMonth.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.YearMonth.AddSchema(System.Xml.Schema.XmlSchemaSet)
  commentId: M:NodaTime.YearMonth.AddSchema(System.Xml.Schema.XmlSchemaSet)
  id: AddSchema(System.Xml.Schema.XmlSchemaSet)
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: AddSchema(XmlSchemaSet)
  nameWithType: YearMonth.AddSchema(XmlSchemaSet)
  fullName: NodaTime.YearMonth.AddSchema(System.Xml.Schema.XmlSchemaSet)
  type: Method
  source:
    id: AddSchema
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 330
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: "\nAdds the XML schema type describing the structure of the <xref href=\"NodaTime.YearMonth\" data-throw-if-not-resolved=\"false\"></xref> XML serialization to the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">xmlSchemaSet</code>.\n"
  example: []
  syntax:
    content: public static XmlQualifiedName AddSchema(XmlSchemaSet xmlSchemaSet)
    parameters:
    - id: xmlSchemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: The XML schema set provided by <xref href="System.Xml.Serialization.XmlSchemaExporter" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Xml.XmlQualifiedName
      description: The qualified name of the schema type that was added to the <code data-dev-comment-type="paramref" class="paramref">xmlSchemaSet</code>.
    content.vb: Public Shared Function AddSchema(xmlSchemaSet As XmlSchemaSet) As XmlQualifiedName
  overload: NodaTime.YearMonth.AddSchema*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: IXmlSerializable.GetSchema()
  nameWithType: YearMonth.IXmlSerializable.GetSchema()
  fullName: NodaTime.YearMonth.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  source:
    id: System.Xml.Serialization.IXmlSerializable.GetSchema
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 333
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: XmlSchema IXmlSerializable.GetSchema()
    return:
      type: System.Xml.Schema.XmlSchema
    content.vb: Function System.Xml.Serialization.IXmlSerializable.GetSchema As XmlSchema Implements IXmlSerializable.GetSchema
  overload: NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#GetSchema*
  implements:
  - System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: YearMonth.System.Xml.Serialization.IXmlSerializable.GetSchema()
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: YearMonth.IXmlSerializable.ReadXml(XmlReader)
  fullName: NodaTime.YearMonth.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  type: Method
  source:
    id: System.Xml.Serialization.IXmlSerializable.ReadXml
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 336
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.ReadXml(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.ReadXml(reader As XmlReader) Implements IXmlSerializable.ReadXml
  overload: NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: YearMonth.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: NodaTime.YearMonth
  langs:
  - csharp
  - vb
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: YearMonth.IXmlSerializable.WriteXml(XmlWriter)
  fullName: NodaTime.YearMonth.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    id: System.Xml.Serialization.IXmlSerializable.WriteXml
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\main\3.0.x\src\NodaTime\YearMonth.cs
    startLine: 356
  assemblies:
  - NodaTime
  namespace: NodaTime
  example: []
  syntax:
    content: void IXmlSerializable.WriteXml(XmlWriter writer)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.WriteXml(writer As XmlWriter) Implements IXmlSerializable.WriteXml
  overload: NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: YearMonth.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
references:
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  parent: NodaTime
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.YearMonth}
  commentId: T:System.IEquatable{NodaTime.YearMonth}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<YearMonth>
  nameWithType: IEquatable<YearMonth>
  fullName: System.IEquatable<NodaTime.YearMonth>
  nameWithType.vb: IEquatable(Of YearMonth)
  fullName.vb: System.IEquatable(Of NodaTime.YearMonth)
  name.vb: IEquatable(Of YearMonth)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.YearMonth
    name: YearMonth
    nameWithType: YearMonth
    fullName: NodaTime.YearMonth
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.YearMonth
    name: YearMonth
    nameWithType: YearMonth
    fullName: NodaTime.YearMonth
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{NodaTime.YearMonth}
  commentId: T:System.IComparable{NodaTime.YearMonth}
  parent: System
  definition: System.IComparable`1
  name: IComparable<YearMonth>
  nameWithType: IComparable<YearMonth>
  fullName: System.IComparable<NodaTime.YearMonth>
  nameWithType.vb: IComparable(Of YearMonth)
  fullName.vb: System.IComparable(Of NodaTime.YearMonth)
  name.vb: IComparable(Of YearMonth)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.YearMonth
    name: YearMonth
    nameWithType: YearMonth
    fullName: NodaTime.YearMonth
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.YearMonth
    name: YearMonth
    nameWithType: YearMonth
    fullName: NodaTime.YearMonth
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.YearMonth.Calendar*
  commentId: Overload:NodaTime.YearMonth.Calendar
  name: Calendar
  nameWithType: YearMonth.Calendar
  fullName: NodaTime.YearMonth.Calendar
- uid: NodaTime.CalendarSystem
  commentId: T:NodaTime.CalendarSystem
  parent: NodaTime
  name: CalendarSystem
  nameWithType: CalendarSystem
  fullName: NodaTime.CalendarSystem
- uid: NodaTime.YearMonth.Year*
  commentId: Overload:NodaTime.YearMonth.Year
  name: Year
  nameWithType: YearMonth.Year
  fullName: NodaTime.YearMonth.Year
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NodaTime.YearMonth.Month*
  commentId: Overload:NodaTime.YearMonth.Month
  name: Month
  nameWithType: YearMonth.Month
  fullName: NodaTime.YearMonth.Month
- uid: NodaTime.YearMonth.YearOfEra*
  commentId: Overload:NodaTime.YearMonth.YearOfEra
  name: YearOfEra
  nameWithType: YearMonth.YearOfEra
  fullName: NodaTime.YearMonth.YearOfEra
- uid: NodaTime.YearMonth.Era*
  commentId: Overload:NodaTime.YearMonth.Era
  name: Era
  nameWithType: YearMonth.Era
  fullName: NodaTime.YearMonth.Era
- uid: NodaTime.Calendars.Era
  commentId: T:NodaTime.Calendars.Era
  parent: NodaTime.Calendars
  name: Era
  nameWithType: Era
  fullName: NodaTime.Calendars.Era
- uid: NodaTime.Calendars
  commentId: N:NodaTime.Calendars
  name: NodaTime.Calendars
  nameWithType: NodaTime.Calendars
  fullName: NodaTime.Calendars
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.YearMonth.#ctor*
  commentId: Overload:NodaTime.YearMonth.#ctor
  name: YearMonth
  nameWithType: YearMonth.YearMonth
  fullName: NodaTime.YearMonth.YearMonth
- uid: NodaTime.DateInterval
  commentId: T:NodaTime.DateInterval
  parent: NodaTime
  name: DateInterval
  nameWithType: DateInterval
  fullName: NodaTime.DateInterval
- uid: NodaTime.YearMonth.ToDateInterval*
  commentId: Overload:NodaTime.YearMonth.ToDateInterval
  name: ToDateInterval
  nameWithType: YearMonth.ToDateInterval
  fullName: NodaTime.YearMonth.ToDateInterval
- uid: NodaTime.YearMonth.OnDayOfMonth*
  commentId: Overload:NodaTime.YearMonth.OnDayOfMonth
  name: OnDayOfMonth
  nameWithType: YearMonth.OnDayOfMonth
  fullName: NodaTime.YearMonth.OnDayOfMonth
- uid: NodaTime.YearMonth.CompareTo*
  commentId: Overload:NodaTime.YearMonth.CompareTo
  name: CompareTo
  nameWithType: YearMonth.CompareTo
  fullName: NodaTime.YearMonth.CompareTo
- uid: System.IComparable{NodaTime.YearMonth}.CompareTo(NodaTime.YearMonth)
  commentId: M:System.IComparable{NodaTime.YearMonth}.CompareTo(NodaTime.YearMonth)
  parent: System.IComparable{NodaTime.YearMonth}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(YearMonth)
  nameWithType: IComparable<YearMonth>.CompareTo(YearMonth)
  fullName: System.IComparable<NodaTime.YearMonth>.CompareTo(NodaTime.YearMonth)
  nameWithType.vb: IComparable(Of YearMonth).CompareTo(YearMonth)
  fullName.vb: System.IComparable(Of NodaTime.YearMonth).CompareTo(NodaTime.YearMonth)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<YearMonth>.CompareTo
    fullName: System.IComparable<NodaTime.YearMonth>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.YearMonth
    name: YearMonth
    nameWithType: YearMonth
    fullName: NodaTime.YearMonth
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of YearMonth).CompareTo
    fullName: System.IComparable(Of NodaTime.YearMonth).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.YearMonth
    name: YearMonth
    nameWithType: YearMonth
    fullName: NodaTime.YearMonth
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.YearMonth
  commentId: T:NodaTime.YearMonth
  parent: NodaTime
  name: YearMonth
  nameWithType: YearMonth
  fullName: NodaTime.YearMonth
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.YearMonth.System#IComparable#CompareTo*
  commentId: Overload:NodaTime.YearMonth.System#IComparable#CompareTo
  name: IComparable.CompareTo
  nameWithType: YearMonth.IComparable.CompareTo
  fullName: NodaTime.YearMonth.System.IComparable.CompareTo
  nameWithType.vb: YearMonth.System.IComparable.CompareTo
  name.vb: System.IComparable.CompareTo
- uid: NodaTime.YearMonth.op_LessThan*
  commentId: Overload:NodaTime.YearMonth.op_LessThan
  name: LessThan
  nameWithType: YearMonth.LessThan
  fullName: NodaTime.YearMonth.LessThan
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NodaTime.YearMonth.op_LessThanOrEqual*
  commentId: Overload:NodaTime.YearMonth.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: YearMonth.LessThanOrEqual
  fullName: NodaTime.YearMonth.LessThanOrEqual
- uid: NodaTime.YearMonth.op_GreaterThan*
  commentId: Overload:NodaTime.YearMonth.op_GreaterThan
  name: GreaterThan
  nameWithType: YearMonth.GreaterThan
  fullName: NodaTime.YearMonth.GreaterThan
- uid: NodaTime.YearMonth.op_GreaterThanOrEqual*
  commentId: Overload:NodaTime.YearMonth.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: YearMonth.GreaterThanOrEqual
  fullName: NodaTime.YearMonth.GreaterThanOrEqual
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.YearMonth.GetHashCode*
  commentId: Overload:NodaTime.YearMonth.GetHashCode
  name: GetHashCode
  nameWithType: YearMonth.GetHashCode
  fullName: NodaTime.YearMonth.GetHashCode
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.YearMonth.Equals*
  commentId: Overload:NodaTime.YearMonth.Equals
  name: Equals
  nameWithType: YearMonth.Equals
  fullName: NodaTime.YearMonth.Equals
- uid: System.IEquatable{NodaTime.YearMonth}.Equals(NodaTime.YearMonth)
  commentId: M:System.IEquatable{NodaTime.YearMonth}.Equals(NodaTime.YearMonth)
  parent: System.IEquatable{NodaTime.YearMonth}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(YearMonth)
  nameWithType: IEquatable<YearMonth>.Equals(YearMonth)
  fullName: System.IEquatable<NodaTime.YearMonth>.Equals(NodaTime.YearMonth)
  nameWithType.vb: IEquatable(Of YearMonth).Equals(YearMonth)
  fullName.vb: System.IEquatable(Of NodaTime.YearMonth).Equals(NodaTime.YearMonth)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<YearMonth>.Equals
    fullName: System.IEquatable<NodaTime.YearMonth>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.YearMonth
    name: YearMonth
    nameWithType: YearMonth
    fullName: NodaTime.YearMonth
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of YearMonth).Equals
    fullName: System.IEquatable(Of NodaTime.YearMonth).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.YearMonth
    name: YearMonth
    nameWithType: YearMonth
    fullName: NodaTime.YearMonth
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.YearMonth.op_Equality*
  commentId: Overload:NodaTime.YearMonth.op_Equality
  name: Equality
  nameWithType: YearMonth.Equality
  fullName: NodaTime.YearMonth.Equality
- uid: NodaTime.YearMonth.op_Inequality*
  commentId: Overload:NodaTime.YearMonth.op_Inequality
  name: Inequality
  nameWithType: YearMonth.Inequality
  fullName: NodaTime.YearMonth.Inequality
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: NodaTime.YearMonth.ToString*
  commentId: Overload:NodaTime.YearMonth.ToString
  name: ToString
  nameWithType: YearMonth.ToString
  fullName: NodaTime.YearMonth.ToString
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Serialization.XmlSchemaExporter
  commentId: T:System.Xml.Serialization.XmlSchemaExporter
  isExternal: true
- uid: NodaTime.YearMonth.AddSchema*
  commentId: Overload:NodaTime.YearMonth.AddSchema
  name: AddSchema
  nameWithType: YearMonth.AddSchema
  fullName: NodaTime.YearMonth.AddSchema
- uid: System.Xml.Schema.XmlSchemaSet
  commentId: T:System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.XmlQualifiedName
  commentId: T:System.Xml.XmlQualifiedName
  parent: System.Xml
  isExternal: true
  name: XmlQualifiedName
  nameWithType: XmlQualifiedName
  fullName: System.Xml.XmlQualifiedName
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#GetSchema*
  commentId: Overload:NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#GetSchema
  name: IXmlSerializable.GetSchema
  nameWithType: YearMonth.IXmlSerializable.GetSchema
  fullName: NodaTime.YearMonth.System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: YearMonth.System.Xml.Serialization.IXmlSerializable.GetSchema
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Xml.Serialization.IXmlSerializable.GetSchema
  commentId: M:System.Xml.Serialization.IXmlSerializable.GetSchema
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: GetSchema()
  nameWithType: IXmlSerializable.GetSchema()
  fullName: System.Xml.Serialization.IXmlSerializable.GetSchema()
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#ReadXml*
  commentId: Overload:NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#ReadXml
  name: IXmlSerializable.ReadXml
  nameWithType: YearMonth.IXmlSerializable.ReadXml
  fullName: NodaTime.YearMonth.System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType.vb: YearMonth.System.Xml.Serialization.IXmlSerializable.ReadXml
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#WriteXml*
  commentId: Overload:NodaTime.YearMonth.System#Xml#Serialization#IXmlSerializable#WriteXml
  name: IXmlSerializable.WriteXml
  nameWithType: YearMonth.IXmlSerializable.WriteXml
  fullName: NodaTime.YearMonth.System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType.vb: YearMonth.System.Xml.Serialization.IXmlSerializable.WriteXml
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
shouldSkipMarkup: true
