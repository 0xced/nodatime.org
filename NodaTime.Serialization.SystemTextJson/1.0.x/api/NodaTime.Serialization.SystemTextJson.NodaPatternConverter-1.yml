### YamlMime:ManagedReference
items:
- uid: NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1
  commentId: T:NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1
  id: NodaPatternConverter`1
  parent: NodaTime.Serialization.SystemTextJson
  children:
  - NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.#ctor(NodaTime.Text.IPattern{`0})
  - NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.#ctor(NodaTime.Text.IPattern{`0},System.Action{`0})
  - NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.ReadJsonImpl(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)
  - NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.WriteJsonImpl(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  langs:
  - csharp
  - vb
  name: NodaPatternConverter<T>
  nameWithType: NodaPatternConverter<T>
  fullName: NodaTime.Serialization.SystemTextJson.NodaPatternConverter<T>
  type: Class
  source:
    id: NodaPatternConverter
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\serialization\src\NodaTime.Serialization.SystemTextJson\NodaPatternConverter.cs
    startLine: 15
  assemblies:
  - NodaTime.Serialization.SystemTextJson
  namespace: NodaTime.Serialization.SystemTextJson
  summary: "\nA JSON converter for types which can be represented by a single string value, parsed or formatted\nfrom an <xref href=\"NodaTime.Text.IPattern%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public sealed class NodaPatternConverter<T> : NodaConverterBase<T>'
    typeParameters:
    - id: T
      description: The type to convert to/from JSON.
    content.vb: >-
      Public NotInheritable Class NodaPatternConverter(Of T)
          Inherits NodaConverterBase(Of T)
  inheritance:
  - System.Object
  - System.Text.Json.Serialization.JsonConverter
  - System.Text.Json.Serialization.JsonConverter{{T}}
  - NodaTime.Serialization.SystemTextJson.NodaConverterBase{{T}}
  inheritedMembers:
  - NodaTime.Serialization.SystemTextJson.NodaConverterBase{{T}}.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
  - NodaTime.Serialization.SystemTextJson.NodaConverterBase{{T}}.Write(System.Text.Json.Utf8JsonWriter,{T},System.Text.Json.JsonSerializerOptions)
  - System.Text.Json.Serialization.JsonConverter{{T}}.CanConvert(System.Type)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: NodaPatternConverter(Of T)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaPatternConverter(Of T)
  name.vb: NodaPatternConverter(Of T)
- uid: NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.#ctor(NodaTime.Text.IPattern{`0})
  commentId: M:NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.#ctor(NodaTime.Text.IPattern{`0})
  id: '#ctor(NodaTime.Text.IPattern{`0})'
  parent: NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1
  langs:
  - csharp
  - vb
  name: NodaPatternConverter(IPattern<T>)
  nameWithType: NodaPatternConverter<T>.NodaPatternConverter(IPattern<T>)
  fullName: NodaTime.Serialization.SystemTextJson.NodaPatternConverter<T>.NodaPatternConverter(NodaTime.Text.IPattern<T>)
  type: Constructor
  source:
    id: .ctor
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\serialization\src\NodaTime.Serialization.SystemTextJson\NodaPatternConverter.cs
    startLine: 25
  assemblies:
  - NodaTime.Serialization.SystemTextJson
  namespace: NodaTime.Serialization.SystemTextJson
  summary: "\nCreates a new instance with a pattern and no validator.\n"
  example: []
  syntax:
    content: public NodaPatternConverter(IPattern<T> pattern)
    parameters:
    - id: pattern
      type: NodaTime.Text.IPattern{{T}}
      description: The pattern to use for parsing and formatting.
    content.vb: Public Sub New(pattern As IPattern(Of T))
  overload: NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">pattern</code> is null.
  nameWithType.vb: NodaPatternConverter(Of T).NodaPatternConverter(IPattern(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaPatternConverter(Of T).NodaPatternConverter(NodaTime.Text.IPattern(Of T))
  name.vb: NodaPatternConverter(IPattern(Of T))
- uid: NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.#ctor(NodaTime.Text.IPattern{`0},System.Action{`0})
  commentId: M:NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.#ctor(NodaTime.Text.IPattern{`0},System.Action{`0})
  id: '#ctor(NodaTime.Text.IPattern{`0},System.Action{`0})'
  parent: NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1
  langs:
  - csharp
  - vb
  name: NodaPatternConverter(IPattern<T>, Action<T>)
  nameWithType: NodaPatternConverter<T>.NodaPatternConverter(IPattern<T>, Action<T>)
  fullName: NodaTime.Serialization.SystemTextJson.NodaPatternConverter<T>.NodaPatternConverter(NodaTime.Text.IPattern<T>, System.Action<T>)
  type: Constructor
  source:
    id: .ctor
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\serialization\src\NodaTime.Serialization.SystemTextJson\NodaPatternConverter.cs
    startLine: 36
  assemblies:
  - NodaTime.Serialization.SystemTextJson
  namespace: NodaTime.Serialization.SystemTextJson
  summary: "\nCreates a new instance with a pattern and an optional validator. The validator will be called before each\nvalue is written, and may throw an exception to indicate that the value cannot be serialized.\n"
  example: []
  syntax:
    content: public NodaPatternConverter(IPattern<T> pattern, Action<T> validator)
    parameters:
    - id: pattern
      type: NodaTime.Text.IPattern{{T}}
      description: The pattern to use for parsing and formatting.
    - id: validator
      type: System.Action{{T}}
      description: The validator to call before writing values. May be null, indicating that no validation is required.
    content.vb: Public Sub New(pattern As IPattern(Of T), validator As Action(Of T))
  overload: NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">pattern</code> is null.
  nameWithType.vb: NodaPatternConverter(Of T).NodaPatternConverter(IPattern(Of T), Action(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaPatternConverter(Of T).NodaPatternConverter(NodaTime.Text.IPattern(Of T), System.Action(Of T))
  name.vb: NodaPatternConverter(IPattern(Of T), Action(Of T))
- uid: NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.ReadJsonImpl(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)
  commentId: M:NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.ReadJsonImpl(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)
  id: ReadJsonImpl(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)
  parent: NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1
  langs:
  - csharp
  - vb
  name: ReadJsonImpl(ref Utf8JsonReader, JsonSerializerOptions)
  nameWithType: NodaPatternConverter<T>.ReadJsonImpl(ref Utf8JsonReader, JsonSerializerOptions)
  fullName: NodaTime.Serialization.SystemTextJson.NodaPatternConverter<T>.ReadJsonImpl(ref System.Text.Json.Utf8JsonReader, System.Text.Json.JsonSerializerOptions)
  type: Method
  source:
    id: ReadJsonImpl
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\serialization\src\NodaTime.Serialization.SystemTextJson\NodaPatternConverter.cs
    startLine: 51
  assemblies:
  - NodaTime.Serialization.SystemTextJson
  namespace: NodaTime.Serialization.SystemTextJson
  summary: "\nImplemented by concrete subclasses, this performs the final conversion from a non-null JSON value to\na value of type T.\n"
  example: []
  syntax:
    content: protected override T ReadJsonImpl(ref Utf8JsonReader reader, JsonSerializerOptions options)
    parameters:
    - id: reader
      type: System.Text.Json.Utf8JsonReader
      description: The JSON reader to pull data from
    - id: options
      type: System.Text.Json.JsonSerializerOptions
      description: The serializer options to use for nested serialization
    return:
      type: '{T}'
      description: The deserialized value of type T.
    content.vb: Protected Overrides Function ReadJsonImpl(ByRef reader As Utf8JsonReader, options As JsonSerializerOptions) As T
  overridden: NodaTime.Serialization.SystemTextJson.NodaConverterBase{{T}}.ReadJsonImpl(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)
  overload: NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.ReadJsonImpl*
  nameWithType.vb: NodaPatternConverter(Of T).ReadJsonImpl(ByRef Utf8JsonReader, JsonSerializerOptions)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaPatternConverter(Of T).ReadJsonImpl(ByRef System.Text.Json.Utf8JsonReader, System.Text.Json.JsonSerializerOptions)
  name.vb: ReadJsonImpl(ByRef Utf8JsonReader, JsonSerializerOptions)
- uid: NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.WriteJsonImpl(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  commentId: M:NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.WriteJsonImpl(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  id: WriteJsonImpl(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  parent: NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1
  langs:
  - csharp
  - vb
  name: WriteJsonImpl(Utf8JsonWriter, T, JsonSerializerOptions)
  nameWithType: NodaPatternConverter<T>.WriteJsonImpl(Utf8JsonWriter, T, JsonSerializerOptions)
  fullName: NodaTime.Serialization.SystemTextJson.NodaPatternConverter<T>.WriteJsonImpl(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
  type: Method
  source:
    id: WriteJsonImpl
    path: C:\users\jon\Test\Projects\nodatime.org\build\history\serialization\src\NodaTime.Serialization.SystemTextJson\NodaPatternConverter.cs
    startLine: 63
  assemblies:
  - NodaTime.Serialization.SystemTextJson
  namespace: NodaTime.Serialization.SystemTextJson
  summary: "\nWrites the formatted value to the writer.\n"
  example: []
  syntax:
    content: protected override void WriteJsonImpl(Utf8JsonWriter writer, T value, JsonSerializerOptions options)
    parameters:
    - id: writer
      type: System.Text.Json.Utf8JsonWriter
      description: The writer to write JSON data to
    - id: value
      type: '{T}'
      description: The value to serializer
    - id: options
      type: System.Text.Json.JsonSerializerOptions
      description: The serializer options to use for nested serialization
    content.vb: Protected Overrides Sub WriteJsonImpl(writer As Utf8JsonWriter, value As T, options As JsonSerializerOptions)
  overridden: NodaTime.Serialization.SystemTextJson.NodaConverterBase{{T}}.WriteJsonImpl(System.Text.Json.Utf8JsonWriter,{T},System.Text.Json.JsonSerializerOptions)
  overload: NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.WriteJsonImpl*
  nameWithType.vb: NodaPatternConverter(Of T).WriteJsonImpl(Utf8JsonWriter, T, JsonSerializerOptions)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaPatternConverter(Of T).WriteJsonImpl(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
references:
- uid: NodaTime.Text.IPattern`1
  commentId: T:NodaTime.Text.IPattern`1
  isExternal: true
  name: IPattern<T>
  nameWithType: IPattern<T>
  fullName: NodaTime.Text.IPattern<T>
  nameWithType.vb: IPattern(Of T)
  fullName.vb: NodaTime.Text.IPattern(Of T)
  name.vb: IPattern(Of T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.SystemTextJson
  commentId: N:NodaTime.Serialization.SystemTextJson
  name: NodaTime.Serialization.SystemTextJson
  nameWithType: NodaTime.Serialization.SystemTextJson
  fullName: NodaTime.Serialization.SystemTextJson
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Text.Json.Serialization.JsonConverter
  commentId: T:System.Text.Json.Serialization.JsonConverter
  parent: System.Text.Json.Serialization
  isExternal: true
  name: JsonConverter
  nameWithType: JsonConverter
  fullName: System.Text.Json.Serialization.JsonConverter
- uid: System.Text.Json.Serialization.JsonConverter{{T}}
  commentId: T:System.Text.Json.Serialization.JsonConverter{`0}
  parent: System.Text.Json.Serialization
  definition: System.Text.Json.Serialization.JsonConverter`1
  name: JsonConverter<T>
  nameWithType: JsonConverter<T>
  fullName: System.Text.Json.Serialization.JsonConverter<T>
  nameWithType.vb: JsonConverter(Of T)
  fullName.vb: System.Text.Json.Serialization.JsonConverter(Of T)
  name.vb: JsonConverter(Of T)
  spec.csharp:
  - uid: System.Text.Json.Serialization.JsonConverter`1
    name: JsonConverter
    nameWithType: JsonConverter
    fullName: System.Text.Json.Serialization.JsonConverter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Text.Json.Serialization.JsonConverter`1
    name: JsonConverter
    nameWithType: JsonConverter
    fullName: System.Text.Json.Serialization.JsonConverter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase{{T}}
  commentId: T:NodaTime.Serialization.SystemTextJson.NodaConverterBase{`0}
  parent: NodaTime.Serialization.SystemTextJson
  definition: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1
  name: NodaConverterBase<T>
  nameWithType: NodaConverterBase<T>
  fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>
  nameWithType.vb: NodaConverterBase(Of T)
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T)
  name.vb: NodaConverterBase(Of T)
  spec.csharp:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1
    name: NodaConverterBase
    nameWithType: NodaConverterBase
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1
    name: NodaConverterBase
    nameWithType: NodaConverterBase
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase{{T}}.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
  commentId: M:NodaTime.Serialization.SystemTextJson.NodaConverterBase{`0}.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
  parent: NodaTime.Serialization.SystemTextJson.NodaConverterBase{{T}}
  definition: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
  name: Read(Utf8JsonReader, Type, JsonSerializerOptions)
  nameWithType: NodaConverterBase<T>.Read(Utf8JsonReader, Type, JsonSerializerOptions)
  fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>.Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions)
  nameWithType.vb: NodaConverterBase(Of T).Read(Utf8JsonReader, Type, JsonSerializerOptions)
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T).Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions)
  spec.csharp:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
    name: Read
    nameWithType: NodaConverterBase<T>.Read
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonReader
    name: Utf8JsonReader
    nameWithType: Utf8JsonReader
    fullName: System.Text.Json.Utf8JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
    name: Read
    nameWithType: NodaConverterBase(Of T).Read
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T).Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonReader
    name: Utf8JsonReader
    nameWithType: Utf8JsonReader
    fullName: System.Text.Json.Utf8JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase{{T}}.Write(System.Text.Json.Utf8JsonWriter,{T},System.Text.Json.JsonSerializerOptions)
  commentId: M:NodaTime.Serialization.SystemTextJson.NodaConverterBase{`0}.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  parent: NodaTime.Serialization.SystemTextJson.NodaConverterBase{{T}}
  definition: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  name: Write(Utf8JsonWriter, T, JsonSerializerOptions)
  nameWithType: NodaConverterBase<T>.Write(Utf8JsonWriter, T, JsonSerializerOptions)
  fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>.Write(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
  nameWithType.vb: NodaConverterBase(Of T).Write(Utf8JsonWriter, T, JsonSerializerOptions)
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T).Write(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
  spec.csharp:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
    name: Write
    nameWithType: NodaConverterBase<T>.Write
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>.Write
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonWriter
    name: Utf8JsonWriter
    nameWithType: Utf8JsonWriter
    fullName: System.Text.Json.Utf8JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
    name: Write
    nameWithType: NodaConverterBase(Of T).Write
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T).Write
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonWriter
    name: Utf8JsonWriter
    nameWithType: Utf8JsonWriter
    fullName: System.Text.Json.Utf8JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text.Json.Serialization.JsonConverter{{T}}.CanConvert(System.Type)
  commentId: M:System.Text.Json.Serialization.JsonConverter{`0}.CanConvert(System.Type)
  parent: System.Text.Json.Serialization.JsonConverter{{T}}
  definition: System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)
  name: CanConvert(Type)
  nameWithType: JsonConverter<T>.CanConvert(Type)
  fullName: System.Text.Json.Serialization.JsonConverter<T>.CanConvert(System.Type)
  nameWithType.vb: JsonConverter(Of T).CanConvert(Type)
  fullName.vb: System.Text.Json.Serialization.JsonConverter(Of T).CanConvert(System.Type)
  spec.csharp:
  - uid: System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonConverter<T>.CanConvert
    fullName: System.Text.Json.Serialization.JsonConverter<T>.CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonConverter(Of T).CanConvert
    fullName: System.Text.Json.Serialization.JsonConverter(Of T).CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Text.Json.Serialization
  commentId: N:System.Text.Json.Serialization
  isExternal: true
  name: System.Text.Json.Serialization
  nameWithType: System.Text.Json.Serialization
  fullName: System.Text.Json.Serialization
- uid: System.Text.Json.Serialization.JsonConverter`1
  commentId: T:System.Text.Json.Serialization.JsonConverter`1
  isExternal: true
  name: JsonConverter<T>
  nameWithType: JsonConverter<T>
  fullName: System.Text.Json.Serialization.JsonConverter<T>
  nameWithType.vb: JsonConverter(Of T)
  fullName.vb: System.Text.Json.Serialization.JsonConverter(Of T)
  name.vb: JsonConverter(Of T)
  spec.csharp:
  - uid: System.Text.Json.Serialization.JsonConverter`1
    name: JsonConverter
    nameWithType: JsonConverter
    fullName: System.Text.Json.Serialization.JsonConverter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Text.Json.Serialization.JsonConverter`1
    name: JsonConverter
    nameWithType: JsonConverter
    fullName: System.Text.Json.Serialization.JsonConverter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1
  commentId: T:NodaTime.Serialization.SystemTextJson.NodaConverterBase`1
  name: NodaConverterBase<T>
  nameWithType: NodaConverterBase<T>
  fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>
  nameWithType.vb: NodaConverterBase(Of T)
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T)
  name.vb: NodaConverterBase(Of T)
  spec.csharp:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1
    name: NodaConverterBase
    nameWithType: NodaConverterBase
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1
    name: NodaConverterBase
    nameWithType: NodaConverterBase
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
  commentId: M:NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
  isExternal: true
  name: Read(Utf8JsonReader, Type, JsonSerializerOptions)
  nameWithType: NodaConverterBase<T>.Read(Utf8JsonReader, Type, JsonSerializerOptions)
  fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>.Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions)
  nameWithType.vb: NodaConverterBase(Of T).Read(Utf8JsonReader, Type, JsonSerializerOptions)
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T).Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions)
  spec.csharp:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
    name: Read
    nameWithType: NodaConverterBase<T>.Read
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonReader
    name: Utf8JsonReader
    nameWithType: Utf8JsonReader
    fullName: System.Text.Json.Utf8JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
    name: Read
    nameWithType: NodaConverterBase(Of T).Read
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T).Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonReader
    name: Utf8JsonReader
    nameWithType: Utf8JsonReader
    fullName: System.Text.Json.Utf8JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  commentId: M:NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  isExternal: true
  name: Write(Utf8JsonWriter, T, JsonSerializerOptions)
  nameWithType: NodaConverterBase<T>.Write(Utf8JsonWriter, T, JsonSerializerOptions)
  fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>.Write(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
  nameWithType.vb: NodaConverterBase(Of T).Write(Utf8JsonWriter, T, JsonSerializerOptions)
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T).Write(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
  spec.csharp:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
    name: Write
    nameWithType: NodaConverterBase<T>.Write
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>.Write
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonWriter
    name: Utf8JsonWriter
    nameWithType: Utf8JsonWriter
    fullName: System.Text.Json.Utf8JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
    name: Write
    nameWithType: NodaConverterBase(Of T).Write
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T).Write
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonWriter
    name: Utf8JsonWriter
    nameWithType: Utf8JsonWriter
    fullName: System.Text.Json.Utf8JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)
  commentId: M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)
  isExternal: true
  name: CanConvert(Type)
  nameWithType: JsonConverter<T>.CanConvert(Type)
  fullName: System.Text.Json.Serialization.JsonConverter<T>.CanConvert(System.Type)
  nameWithType.vb: JsonConverter(Of T).CanConvert(Type)
  fullName.vb: System.Text.Json.Serialization.JsonConverter(Of T).CanConvert(System.Type)
  spec.csharp:
  - uid: System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonConverter<T>.CanConvert
    fullName: System.Text.Json.Serialization.JsonConverter<T>.CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonConverter(Of T).CanConvert
    fullName: System.Text.Json.Serialization.JsonConverter(Of T).CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.#ctor*
  commentId: Overload:NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.#ctor
  name: NodaPatternConverter
  nameWithType: NodaPatternConverter<T>.NodaPatternConverter
  fullName: NodaTime.Serialization.SystemTextJson.NodaPatternConverter<T>.NodaPatternConverter
  nameWithType.vb: NodaPatternConverter(Of T).NodaPatternConverter
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaPatternConverter(Of T).NodaPatternConverter
- uid: NodaTime.Text.IPattern{{T}}
  commentId: T:NodaTime.Text.IPattern{`0}
  parent: NodaTime.Text
  definition: NodaTime.Text.IPattern`1
  name: IPattern<T>
  nameWithType: IPattern<T>
  fullName: NodaTime.Text.IPattern<T>
  nameWithType.vb: IPattern(Of T)
  fullName.vb: NodaTime.Text.IPattern(Of T)
  name.vb: IPattern(Of T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text
  commentId: N:NodaTime.Text
  isExternal: true
  name: NodaTime.Text
  nameWithType: NodaTime.Text
  fullName: NodaTime.Text
- uid: System.Action{{T}}
  commentId: T:System.Action{`0}
  parent: System
  definition: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase{{T}}.ReadJsonImpl(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)
  commentId: M:NodaTime.Serialization.SystemTextJson.NodaConverterBase{`0}.ReadJsonImpl(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)
  parent: NodaTime.Serialization.SystemTextJson.NodaConverterBase{{T}}
  definition: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.ReadJsonImpl(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)
  name: ReadJsonImpl(Utf8JsonReader, JsonSerializerOptions)
  nameWithType: NodaConverterBase<T>.ReadJsonImpl(Utf8JsonReader, JsonSerializerOptions)
  fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>.ReadJsonImpl(System.Text.Json.Utf8JsonReader, System.Text.Json.JsonSerializerOptions)
  nameWithType.vb: NodaConverterBase(Of T).ReadJsonImpl(Utf8JsonReader, JsonSerializerOptions)
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T).ReadJsonImpl(System.Text.Json.Utf8JsonReader, System.Text.Json.JsonSerializerOptions)
  spec.csharp:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.ReadJsonImpl(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)
    name: ReadJsonImpl
    nameWithType: NodaConverterBase<T>.ReadJsonImpl
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>.ReadJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonReader
    name: Utf8JsonReader
    nameWithType: Utf8JsonReader
    fullName: System.Text.Json.Utf8JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.ReadJsonImpl(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)
    name: ReadJsonImpl
    nameWithType: NodaConverterBase(Of T).ReadJsonImpl
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T).ReadJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonReader
    name: Utf8JsonReader
    nameWithType: Utf8JsonReader
    fullName: System.Text.Json.Utf8JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.ReadJsonImpl*
  commentId: Overload:NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.ReadJsonImpl
  name: ReadJsonImpl
  nameWithType: NodaPatternConverter<T>.ReadJsonImpl
  fullName: NodaTime.Serialization.SystemTextJson.NodaPatternConverter<T>.ReadJsonImpl
  nameWithType.vb: NodaPatternConverter(Of T).ReadJsonImpl
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaPatternConverter(Of T).ReadJsonImpl
- uid: System.Text.Json.Utf8JsonReader
  commentId: T:System.Text.Json.Utf8JsonReader
  parent: System.Text.Json
  isExternal: true
  name: Utf8JsonReader
  nameWithType: Utf8JsonReader
  fullName: System.Text.Json.Utf8JsonReader
- uid: System.Text.Json.JsonSerializerOptions
  commentId: T:System.Text.Json.JsonSerializerOptions
  parent: System.Text.Json
  isExternal: true
  name: JsonSerializerOptions
  nameWithType: JsonSerializerOptions
  fullName: System.Text.Json.JsonSerializerOptions
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.ReadJsonImpl(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)
  commentId: M:NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.ReadJsonImpl(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)
  isExternal: true
  name: ReadJsonImpl(Utf8JsonReader, JsonSerializerOptions)
  nameWithType: NodaConverterBase<T>.ReadJsonImpl(Utf8JsonReader, JsonSerializerOptions)
  fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>.ReadJsonImpl(System.Text.Json.Utf8JsonReader, System.Text.Json.JsonSerializerOptions)
  nameWithType.vb: NodaConverterBase(Of T).ReadJsonImpl(Utf8JsonReader, JsonSerializerOptions)
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T).ReadJsonImpl(System.Text.Json.Utf8JsonReader, System.Text.Json.JsonSerializerOptions)
  spec.csharp:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.ReadJsonImpl(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)
    name: ReadJsonImpl
    nameWithType: NodaConverterBase<T>.ReadJsonImpl
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>.ReadJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonReader
    name: Utf8JsonReader
    nameWithType: Utf8JsonReader
    fullName: System.Text.Json.Utf8JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.ReadJsonImpl(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)
    name: ReadJsonImpl
    nameWithType: NodaConverterBase(Of T).ReadJsonImpl
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T).ReadJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonReader
    name: Utf8JsonReader
    nameWithType: Utf8JsonReader
    fullName: System.Text.Json.Utf8JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text.Json
  commentId: N:System.Text.Json
  isExternal: true
  name: System.Text.Json
  nameWithType: System.Text.Json
  fullName: System.Text.Json
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase{{T}}.WriteJsonImpl(System.Text.Json.Utf8JsonWriter,{T},System.Text.Json.JsonSerializerOptions)
  commentId: M:NodaTime.Serialization.SystemTextJson.NodaConverterBase{`0}.WriteJsonImpl(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  parent: NodaTime.Serialization.SystemTextJson.NodaConverterBase{{T}}
  definition: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.WriteJsonImpl(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  name: WriteJsonImpl(Utf8JsonWriter, T, JsonSerializerOptions)
  nameWithType: NodaConverterBase<T>.WriteJsonImpl(Utf8JsonWriter, T, JsonSerializerOptions)
  fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>.WriteJsonImpl(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
  nameWithType.vb: NodaConverterBase(Of T).WriteJsonImpl(Utf8JsonWriter, T, JsonSerializerOptions)
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T).WriteJsonImpl(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
  spec.csharp:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.WriteJsonImpl(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
    name: WriteJsonImpl
    nameWithType: NodaConverterBase<T>.WriteJsonImpl
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>.WriteJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonWriter
    name: Utf8JsonWriter
    nameWithType: Utf8JsonWriter
    fullName: System.Text.Json.Utf8JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.WriteJsonImpl(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
    name: WriteJsonImpl
    nameWithType: NodaConverterBase(Of T).WriteJsonImpl
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T).WriteJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonWriter
    name: Utf8JsonWriter
    nameWithType: Utf8JsonWriter
    fullName: System.Text.Json.Utf8JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.WriteJsonImpl*
  commentId: Overload:NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1.WriteJsonImpl
  name: WriteJsonImpl
  nameWithType: NodaPatternConverter<T>.WriteJsonImpl
  fullName: NodaTime.Serialization.SystemTextJson.NodaPatternConverter<T>.WriteJsonImpl
  nameWithType.vb: NodaPatternConverter(Of T).WriteJsonImpl
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaPatternConverter(Of T).WriteJsonImpl
- uid: System.Text.Json.Utf8JsonWriter
  commentId: T:System.Text.Json.Utf8JsonWriter
  parent: System.Text.Json
  isExternal: true
  name: Utf8JsonWriter
  nameWithType: Utf8JsonWriter
  fullName: System.Text.Json.Utf8JsonWriter
- uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.WriteJsonImpl(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  commentId: M:NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.WriteJsonImpl(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  isExternal: true
  name: WriteJsonImpl(Utf8JsonWriter, T, JsonSerializerOptions)
  nameWithType: NodaConverterBase<T>.WriteJsonImpl(Utf8JsonWriter, T, JsonSerializerOptions)
  fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>.WriteJsonImpl(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
  nameWithType.vb: NodaConverterBase(Of T).WriteJsonImpl(Utf8JsonWriter, T, JsonSerializerOptions)
  fullName.vb: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T).WriteJsonImpl(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
  spec.csharp:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.WriteJsonImpl(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
    name: WriteJsonImpl
    nameWithType: NodaConverterBase<T>.WriteJsonImpl
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase<T>.WriteJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonWriter
    name: Utf8JsonWriter
    nameWithType: Utf8JsonWriter
    fullName: System.Text.Json.Utf8JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Serialization.SystemTextJson.NodaConverterBase`1.WriteJsonImpl(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
    name: WriteJsonImpl
    nameWithType: NodaConverterBase(Of T).WriteJsonImpl
    fullName: NodaTime.Serialization.SystemTextJson.NodaConverterBase(Of T).WriteJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonWriter
    name: Utf8JsonWriter
    nameWithType: Utf8JsonWriter
    fullName: System.Text.Json.Utf8JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
