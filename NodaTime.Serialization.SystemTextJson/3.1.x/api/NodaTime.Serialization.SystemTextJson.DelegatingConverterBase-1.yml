### YamlMime:ManagedReference
items:
- uid: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1
  commentId: T:NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1
  id: DelegatingConverterBase`1
  parent: NodaTime.Serialization.SystemTextJson
  children:
  - NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.#ctor(System.Text.Json.Serialization.JsonConverter{`0})
  - NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.CanConvert(System.Type)
  - NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
  - NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  langs:
  - csharp
  - vb
  name: DelegatingConverterBase<T>
  nameWithType: DelegatingConverterBase<T>
  fullName: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase<T>
  type: Class
  source:
    id: DelegatingConverterBase
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.SystemTextJson\DelegatingConverterBase.cs
    startLine: 32
  assemblies:
  - NodaTime.Serialization.SystemTextJson
  namespace: NodaTime.Serialization.SystemTextJson
  summary: "\nConverter which does nothing but delegate to another one for all operations.\n"
  remarks: "\nNothing in this class is specific to Noda Time. Its purpose is to make it easy\nto reuse other converter instances with <xref href=\"NodaTime.LocalDate\" data-throw-if-not-resolved=\"false\"></xref>,\nwhich can only identify a converter by type.\n"
  example:
  - "\n<p>\nIf you had some <xref href=\"System.Text.Json.Serialization.JsonConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref> properties which needed one converter,\nbut others that needed another, you might want to have different types implementing\nthose converters. Each type would just derive from this, passing the right converter\ninto the base constructor.\n</p>\n<pre><code>public sealed class ShortDateConverter : DelegatingConverterBase\n{\n    public ShortDateConverter() : base(NodaConverters.LocalDateConverter) {}\n}</code></pre>\n"
  syntax:
    content: 'public abstract class DelegatingConverterBase<T> : JsonConverter<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public MustInherit Class DelegatingConverterBase(Of T)
          Inherits JsonConverter(Of T)
  inheritance:
  - System.Object
  - System.Text.Json.Serialization.JsonConverter
  - System.Text.Json.Serialization.JsonConverter{{T}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: DelegatingConverterBase(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase(Of T)
  name.vb: DelegatingConverterBase(Of T)
- uid: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.#ctor(System.Text.Json.Serialization.JsonConverter{`0})
  commentId: M:NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.#ctor(System.Text.Json.Serialization.JsonConverter{`0})
  id: '#ctor(System.Text.Json.Serialization.JsonConverter{`0})'
  parent: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1
  langs:
  - csharp
  - vb
  name: DelegatingConverterBase(JsonConverter<T>)
  nameWithType: DelegatingConverterBase<T>.DelegatingConverterBase(JsonConverter<T>)
  fullName: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase<T>.DelegatingConverterBase(System.Text.Json.Serialization.JsonConverter<T>)
  type: Constructor
  source:
    id: .ctor
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.SystemTextJson\DelegatingConverterBase.cs
    startLine: 40
  assemblies:
  - NodaTime.Serialization.SystemTextJson
  namespace: NodaTime.Serialization.SystemTextJson
  summary: "\nConstructs a converter delegating to <code data-dev-comment-type=\"paramref\" class=\"paramref\">original</code>.\n"
  example: []
  syntax:
    content: protected DelegatingConverterBase(JsonConverter<T> original)
    parameters:
    - id: original
      type: System.Text.Json.Serialization.JsonConverter{{T}}
      description: The converter to delegate to. Must not be null.
    content.vb: Protected Sub New(original As JsonConverter(Of T))
  overload: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.#ctor*
  nameWithType.vb: DelegatingConverterBase(Of T).DelegatingConverterBase(JsonConverter(Of T))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase(Of T).DelegatingConverterBase(System.Text.Json.Serialization.JsonConverter(Of T))
  name.vb: DelegatingConverterBase(JsonConverter(Of T))
- uid: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  commentId: M:NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  id: Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  parent: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1
  langs:
  - csharp
  - vb
  name: Write(Utf8JsonWriter, T, JsonSerializerOptions)
  nameWithType: DelegatingConverterBase<T>.Write(Utf8JsonWriter, T, JsonSerializerOptions)
  fullName: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase<T>.Write(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
  type: Method
  source:
    id: Write
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.SystemTextJson\DelegatingConverterBase.cs
    startLine: 44
  assemblies:
  - NodaTime.Serialization.SystemTextJson
  namespace: NodaTime.Serialization.SystemTextJson
  example: []
  syntax:
    content: public override void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options)
    parameters:
    - id: writer
      type: System.Text.Json.Utf8JsonWriter
    - id: value
      type: '{T}'
    - id: options
      type: System.Text.Json.JsonSerializerOptions
    content.vb: Public Overrides Sub Write(writer As Utf8JsonWriter, value As T, options As JsonSerializerOptions)
  overridden: System.Text.Json.Serialization.JsonConverter{{T}}.Write(System.Text.Json.Utf8JsonWriter,{T},System.Text.Json.JsonSerializerOptions)
  overload: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.Write*
  nameWithType.vb: DelegatingConverterBase(Of T).Write(Utf8JsonWriter, T, JsonSerializerOptions)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase(Of T).Write(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
- uid: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
  commentId: M:NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
  id: Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
  parent: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1
  langs:
  - csharp
  - vb
  name: Read(ref Utf8JsonReader, Type, JsonSerializerOptions)
  nameWithType: DelegatingConverterBase<T>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions)
  fullName: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase<T>.Read(ref System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions)
  type: Method
  source:
    id: Read
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.SystemTextJson\DelegatingConverterBase.cs
    startLine: 48
  assemblies:
  - NodaTime.Serialization.SystemTextJson
  namespace: NodaTime.Serialization.SystemTextJson
  example: []
  syntax:
    content: public override T Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    parameters:
    - id: reader
      type: System.Text.Json.Utf8JsonReader
    - id: typeToConvert
      type: System.Type
    - id: options
      type: System.Text.Json.JsonSerializerOptions
    return:
      type: '{T}'
    content.vb: Public Overrides Function Read(ByRef reader As Utf8JsonReader, typeToConvert As Type, options As JsonSerializerOptions) As T
  overridden: System.Text.Json.Serialization.JsonConverter{{T}}.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
  overload: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.Read*
  nameWithType.vb: DelegatingConverterBase(Of T).Read(ByRef Utf8JsonReader, Type, JsonSerializerOptions)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase(Of T).Read(ByRef System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions)
  name.vb: Read(ByRef Utf8JsonReader, Type, JsonSerializerOptions)
- uid: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.CanConvert(System.Type)
  commentId: M:NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.CanConvert(System.Type)
  id: CanConvert(System.Type)
  parent: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1
  langs:
  - csharp
  - vb
  name: CanConvert(Type)
  nameWithType: DelegatingConverterBase<T>.CanConvert(Type)
  fullName: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase<T>.CanConvert(System.Type)
  type: Method
  source:
    id: CanConvert
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.SystemTextJson\DelegatingConverterBase.cs
    startLine: 52
  assemblies:
  - NodaTime.Serialization.SystemTextJson
  namespace: NodaTime.Serialization.SystemTextJson
  example: []
  syntax:
    content: public override bool CanConvert(Type objectType)
    parameters:
    - id: objectType
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Public Overrides Function CanConvert(objectType As Type) As Boolean
  overridden: System.Text.Json.Serialization.JsonConverter{{T}}.CanConvert(System.Type)
  overload: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.CanConvert*
  nameWithType.vb: DelegatingConverterBase(Of T).CanConvert(Type)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase(Of T).CanConvert(System.Type)
references:
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  isExternal: true
- uid: System.Text.Json.Serialization.JsonConverterAttribute
  commentId: T:System.Text.Json.Serialization.JsonConverterAttribute
  isExternal: true
- uid: NodaTime.Serialization.SystemTextJson
  commentId: N:NodaTime.Serialization.SystemTextJson
  name: NodaTime.Serialization.SystemTextJson
  nameWithType: NodaTime.Serialization.SystemTextJson
  fullName: NodaTime.Serialization.SystemTextJson
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Text.Json.Serialization.JsonConverter
  commentId: T:System.Text.Json.Serialization.JsonConverter
  parent: System.Text.Json.Serialization
  isExternal: true
  name: JsonConverter
  nameWithType: JsonConverter
  fullName: System.Text.Json.Serialization.JsonConverter
- uid: System.Text.Json.Serialization.JsonConverter{{T}}
  commentId: T:System.Text.Json.Serialization.JsonConverter{`0}
  parent: System.Text.Json.Serialization
  definition: System.Text.Json.Serialization.JsonConverter`1
  name: JsonConverter<T>
  nameWithType: JsonConverter<T>
  fullName: System.Text.Json.Serialization.JsonConverter<T>
  nameWithType.vb: JsonConverter(Of T)
  fullName.vb: System.Text.Json.Serialization.JsonConverter(Of T)
  name.vb: JsonConverter(Of T)
  spec.csharp:
  - uid: System.Text.Json.Serialization.JsonConverter`1
    name: JsonConverter
    nameWithType: JsonConverter
    fullName: System.Text.Json.Serialization.JsonConverter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Text.Json.Serialization.JsonConverter`1
    name: JsonConverter
    nameWithType: JsonConverter
    fullName: System.Text.Json.Serialization.JsonConverter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Text.Json.Serialization
  commentId: N:System.Text.Json.Serialization
  isExternal: true
  name: System.Text.Json.Serialization
  nameWithType: System.Text.Json.Serialization
  fullName: System.Text.Json.Serialization
- uid: System.Text.Json.Serialization.JsonConverter`1
  commentId: T:System.Text.Json.Serialization.JsonConverter`1
  isExternal: true
  name: JsonConverter<T>
  nameWithType: JsonConverter<T>
  fullName: System.Text.Json.Serialization.JsonConverter<T>
  nameWithType.vb: JsonConverter(Of T)
  fullName.vb: System.Text.Json.Serialization.JsonConverter(Of T)
  name.vb: JsonConverter(Of T)
  spec.csharp:
  - uid: System.Text.Json.Serialization.JsonConverter`1
    name: JsonConverter
    nameWithType: JsonConverter
    fullName: System.Text.Json.Serialization.JsonConverter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Text.Json.Serialization.JsonConverter`1
    name: JsonConverter
    nameWithType: JsonConverter
    fullName: System.Text.Json.Serialization.JsonConverter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.#ctor*
  commentId: Overload:NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.#ctor
  name: DelegatingConverterBase
  nameWithType: DelegatingConverterBase<T>.DelegatingConverterBase
  fullName: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase<T>.DelegatingConverterBase
  nameWithType.vb: DelegatingConverterBase(Of T).DelegatingConverterBase
  fullName.vb: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase(Of T).DelegatingConverterBase
- uid: System.Text.Json.Serialization.JsonConverter{{T}}.Write(System.Text.Json.Utf8JsonWriter,{T},System.Text.Json.JsonSerializerOptions)
  commentId: M:System.Text.Json.Serialization.JsonConverter{`0}.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  parent: System.Text.Json.Serialization.JsonConverter{{T}}
  definition: System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  name: Write(Utf8JsonWriter, T, JsonSerializerOptions)
  nameWithType: JsonConverter<T>.Write(Utf8JsonWriter, T, JsonSerializerOptions)
  fullName: System.Text.Json.Serialization.JsonConverter<T>.Write(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
  nameWithType.vb: JsonConverter(Of T).Write(Utf8JsonWriter, T, JsonSerializerOptions)
  fullName.vb: System.Text.Json.Serialization.JsonConverter(Of T).Write(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
  spec.csharp:
  - uid: System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
    name: Write
    nameWithType: JsonConverter<T>.Write
    fullName: System.Text.Json.Serialization.JsonConverter<T>.Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonWriter
    name: Utf8JsonWriter
    nameWithType: Utf8JsonWriter
    fullName: System.Text.Json.Utf8JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
    name: Write
    nameWithType: JsonConverter(Of T).Write
    fullName: System.Text.Json.Serialization.JsonConverter(Of T).Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonWriter
    name: Utf8JsonWriter
    nameWithType: Utf8JsonWriter
    fullName: System.Text.Json.Utf8JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.Write*
  commentId: Overload:NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.Write
  name: Write
  nameWithType: DelegatingConverterBase<T>.Write
  fullName: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase<T>.Write
  nameWithType.vb: DelegatingConverterBase(Of T).Write
  fullName.vb: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase(Of T).Write
- uid: System.Text.Json.Utf8JsonWriter
  commentId: T:System.Text.Json.Utf8JsonWriter
  parent: System.Text.Json
  isExternal: true
  name: Utf8JsonWriter
  nameWithType: Utf8JsonWriter
  fullName: System.Text.Json.Utf8JsonWriter
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Text.Json.JsonSerializerOptions
  commentId: T:System.Text.Json.JsonSerializerOptions
  parent: System.Text.Json
  isExternal: true
  name: JsonSerializerOptions
  nameWithType: JsonSerializerOptions
  fullName: System.Text.Json.JsonSerializerOptions
- uid: System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  commentId: M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
  isExternal: true
  name: Write(Utf8JsonWriter, T, JsonSerializerOptions)
  nameWithType: JsonConverter<T>.Write(Utf8JsonWriter, T, JsonSerializerOptions)
  fullName: System.Text.Json.Serialization.JsonConverter<T>.Write(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
  nameWithType.vb: JsonConverter(Of T).Write(Utf8JsonWriter, T, JsonSerializerOptions)
  fullName.vb: System.Text.Json.Serialization.JsonConverter(Of T).Write(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
  spec.csharp:
  - uid: System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
    name: Write
    nameWithType: JsonConverter<T>.Write
    fullName: System.Text.Json.Serialization.JsonConverter<T>.Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonWriter
    name: Utf8JsonWriter
    nameWithType: Utf8JsonWriter
    fullName: System.Text.Json.Utf8JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
    name: Write
    nameWithType: JsonConverter(Of T).Write
    fullName: System.Text.Json.Serialization.JsonConverter(Of T).Write
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonWriter
    name: Utf8JsonWriter
    nameWithType: Utf8JsonWriter
    fullName: System.Text.Json.Utf8JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text.Json
  commentId: N:System.Text.Json
  isExternal: true
  name: System.Text.Json
  nameWithType: System.Text.Json
  fullName: System.Text.Json
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Text.Json.Serialization.JsonConverter{{T}}.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
  commentId: M:System.Text.Json.Serialization.JsonConverter{`0}.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
  parent: System.Text.Json.Serialization.JsonConverter{{T}}
  definition: System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
  name: Read(Utf8JsonReader, Type, JsonSerializerOptions)
  nameWithType: JsonConverter<T>.Read(Utf8JsonReader, Type, JsonSerializerOptions)
  fullName: System.Text.Json.Serialization.JsonConverter<T>.Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions)
  nameWithType.vb: JsonConverter(Of T).Read(Utf8JsonReader, Type, JsonSerializerOptions)
  fullName.vb: System.Text.Json.Serialization.JsonConverter(Of T).Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions)
  spec.csharp:
  - uid: System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
    name: Read
    nameWithType: JsonConverter<T>.Read
    fullName: System.Text.Json.Serialization.JsonConverter<T>.Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonReader
    name: Utf8JsonReader
    nameWithType: Utf8JsonReader
    fullName: System.Text.Json.Utf8JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
    name: Read
    nameWithType: JsonConverter(Of T).Read
    fullName: System.Text.Json.Serialization.JsonConverter(Of T).Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonReader
    name: Utf8JsonReader
    nameWithType: Utf8JsonReader
    fullName: System.Text.Json.Utf8JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.Read*
  commentId: Overload:NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.Read
  name: Read
  nameWithType: DelegatingConverterBase<T>.Read
  fullName: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase<T>.Read
  nameWithType.vb: DelegatingConverterBase(Of T).Read
  fullName.vb: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase(Of T).Read
- uid: System.Text.Json.Utf8JsonReader
  commentId: T:System.Text.Json.Utf8JsonReader
  parent: System.Text.Json
  isExternal: true
  name: Utf8JsonReader
  nameWithType: Utf8JsonReader
  fullName: System.Text.Json.Utf8JsonReader
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
  commentId: M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
  isExternal: true
  name: Read(Utf8JsonReader, Type, JsonSerializerOptions)
  nameWithType: JsonConverter<T>.Read(Utf8JsonReader, Type, JsonSerializerOptions)
  fullName: System.Text.Json.Serialization.JsonConverter<T>.Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions)
  nameWithType.vb: JsonConverter(Of T).Read(Utf8JsonReader, Type, JsonSerializerOptions)
  fullName.vb: System.Text.Json.Serialization.JsonConverter(Of T).Read(System.Text.Json.Utf8JsonReader, System.Type, System.Text.Json.JsonSerializerOptions)
  spec.csharp:
  - uid: System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
    name: Read
    nameWithType: JsonConverter<T>.Read
    fullName: System.Text.Json.Serialization.JsonConverter<T>.Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonReader
    name: Utf8JsonReader
    nameWithType: Utf8JsonReader
    fullName: System.Text.Json.Utf8JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)
    name: Read
    nameWithType: JsonConverter(Of T).Read
    fullName: System.Text.Json.Serialization.JsonConverter(Of T).Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Json.Utf8JsonReader
    name: Utf8JsonReader
    nameWithType: Utf8JsonReader
    fullName: System.Text.Json.Utf8JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Json.JsonSerializerOptions
    name: JsonSerializerOptions
    nameWithType: JsonSerializerOptions
    fullName: System.Text.Json.JsonSerializerOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text.Json.Serialization.JsonConverter{{T}}.CanConvert(System.Type)
  commentId: M:System.Text.Json.Serialization.JsonConverter{`0}.CanConvert(System.Type)
  parent: System.Text.Json.Serialization.JsonConverter{{T}}
  definition: System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)
  name: CanConvert(Type)
  nameWithType: JsonConverter<T>.CanConvert(Type)
  fullName: System.Text.Json.Serialization.JsonConverter<T>.CanConvert(System.Type)
  nameWithType.vb: JsonConverter(Of T).CanConvert(Type)
  fullName.vb: System.Text.Json.Serialization.JsonConverter(Of T).CanConvert(System.Type)
  spec.csharp:
  - uid: System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonConverter<T>.CanConvert
    fullName: System.Text.Json.Serialization.JsonConverter<T>.CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonConverter(Of T).CanConvert
    fullName: System.Text.Json.Serialization.JsonConverter(Of T).CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.CanConvert*
  commentId: Overload:NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1.CanConvert
  name: CanConvert
  nameWithType: DelegatingConverterBase<T>.CanConvert
  fullName: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase<T>.CanConvert
  nameWithType.vb: DelegatingConverterBase(Of T).CanConvert
  fullName.vb: NodaTime.Serialization.SystemTextJson.DelegatingConverterBase(Of T).CanConvert
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)
  commentId: M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)
  isExternal: true
  name: CanConvert(Type)
  nameWithType: JsonConverter<T>.CanConvert(Type)
  fullName: System.Text.Json.Serialization.JsonConverter<T>.CanConvert(System.Type)
  nameWithType.vb: JsonConverter(Of T).CanConvert(Type)
  fullName.vb: System.Text.Json.Serialization.JsonConverter(Of T).CanConvert(System.Type)
  spec.csharp:
  - uid: System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonConverter<T>.CanConvert
    fullName: System.Text.Json.Serialization.JsonConverter<T>.CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonConverter(Of T).CanConvert
    fullName: System.Text.Json.Serialization.JsonConverter(Of T).CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
