### YamlMime:ManagedReference
items:
- uid: NodaTime.Serialization.JsonNet.NodaConverters
  commentId: T:NodaTime.Serialization.JsonNet.NodaConverters
  id: NodaConverters
  parent: NodaTime.Serialization.JsonNet
  children:
  - NodaTime.Serialization.JsonNet.NodaConverters.AnnualDateConverter
  - NodaTime.Serialization.JsonNet.NodaConverters.CreateDateTimeZoneConverter(NodaTime.IDateTimeZoneProvider)
  - NodaTime.Serialization.JsonNet.NodaConverters.CreateZonedDateTimeConverter(NodaTime.IDateTimeZoneProvider)
  - NodaTime.Serialization.JsonNet.NodaConverters.DateIntervalConverter
  - NodaTime.Serialization.JsonNet.NodaConverters.DurationConverter
  - NodaTime.Serialization.JsonNet.NodaConverters.InstantConverter
  - NodaTime.Serialization.JsonNet.NodaConverters.IntervalConverter
  - NodaTime.Serialization.JsonNet.NodaConverters.IsoDateIntervalConverter
  - NodaTime.Serialization.JsonNet.NodaConverters.IsoIntervalConverter
  - NodaTime.Serialization.JsonNet.NodaConverters.LocalDateConverter
  - NodaTime.Serialization.JsonNet.NodaConverters.LocalDateTimeConverter
  - NodaTime.Serialization.JsonNet.NodaConverters.LocalTimeConverter
  - NodaTime.Serialization.JsonNet.NodaConverters.NormalizingIsoPeriodConverter
  - NodaTime.Serialization.JsonNet.NodaConverters.OffsetConverter
  - NodaTime.Serialization.JsonNet.NodaConverters.OffsetDateConverter
  - NodaTime.Serialization.JsonNet.NodaConverters.OffsetDateTimeConverter
  - NodaTime.Serialization.JsonNet.NodaConverters.OffsetTimeConverter
  - NodaTime.Serialization.JsonNet.NodaConverters.RoundtripPeriodConverter
  langs:
  - csharp
  - vb
  name: NodaConverters
  nameWithType: NodaConverters
  fullName: NodaTime.Serialization.JsonNet.NodaConverters
  type: Class
  source:
    id: NodaConverters
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 14
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConvenience class to expose preconfigured converters for Noda Time types, and factory methods\nfor creating those which require parameters.\n"
  example: []
  syntax:
    content: public static class NodaConverters
    content.vb: Public Module NodaConverters
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NodaTime.Serialization.JsonNet.NodaConverters.InstantConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.InstantConverter
  id: InstantConverter
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: InstantConverter
  nameWithType: NodaConverters.InstantConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.InstantConverter
  type: Property
  source:
    id: InstantConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 20
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConverter for instants, using the ISO-8601 date/time pattern, extended as required to accommodate nanoseconds, and\nspecifying &apos;Z&apos; at the end to show it&apos;s effectively in UTC.\n"
  example: []
  syntax:
    content: public static JsonConverter InstantConverter { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonConverter
    content.vb: Public Shared ReadOnly Property InstantConverter As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.InstantConverter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.NodaConverters.LocalDateConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.LocalDateConverter
  id: LocalDateConverter
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: LocalDateConverter
  nameWithType: NodaConverters.LocalDateConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.LocalDateConverter
  type: Property
  source:
    id: LocalDateConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 26
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConverter for local dates, using the ISO-8601 date pattern.\n"
  example: []
  syntax:
    content: public static JsonConverter LocalDateConverter { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonConverter
    content.vb: Public Shared ReadOnly Property LocalDateConverter As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.LocalDateConverter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.NodaConverters.LocalDateTimeConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.LocalDateTimeConverter
  id: LocalDateTimeConverter
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: LocalDateTimeConverter
  nameWithType: NodaConverters.LocalDateTimeConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.LocalDateTimeConverter
  type: Property
  source:
    id: LocalDateTimeConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 34
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConverter for local dates and times, using the ISO-8601 date/time pattern, extended as required to accommodate nanoseconds.\nNo time zone designator is applied.\n"
  example: []
  syntax:
    content: public static JsonConverter LocalDateTimeConverter { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonConverter
    content.vb: Public Shared ReadOnly Property LocalDateTimeConverter As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.LocalDateTimeConverter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.NodaConverters.LocalTimeConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.LocalTimeConverter
  id: LocalTimeConverter
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: LocalTimeConverter
  nameWithType: NodaConverters.LocalTimeConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.LocalTimeConverter
  type: Property
  source:
    id: LocalTimeConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 41
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConverter for local times, using the ISO-8601 time pattern, extended as required to accommodate nanoseconds.\n"
  example: []
  syntax:
    content: public static JsonConverter LocalTimeConverter { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonConverter
    content.vb: Public Shared ReadOnly Property LocalTimeConverter As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.LocalTimeConverter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.NodaConverters.AnnualDateConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.AnnualDateConverter
  id: AnnualDateConverter
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: AnnualDateConverter
  nameWithType: NodaConverters.AnnualDateConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.AnnualDateConverter
  type: Property
  source:
    id: AnnualDateConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 47
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConverter for annual dates, using an ISO-8601 compatible pattern for the month and day parts.\n"
  example: []
  syntax:
    content: public static JsonConverter AnnualDateConverter { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonConverter
    content.vb: Public Shared ReadOnly Property AnnualDateConverter As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.AnnualDateConverter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.NodaConverters.IntervalConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.IntervalConverter
  id: IntervalConverter
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: IntervalConverter
  nameWithType: NodaConverters.IntervalConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.IntervalConverter
  type: Property
  source:
    id: IntervalConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 53
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConverter for intervals. This must be used in a serializer which also has an instant converter.\n"
  example: []
  syntax:
    content: public static JsonConverter IntervalConverter { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonConverter
    content.vb: Public Shared ReadOnly Property IntervalConverter As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.IntervalConverter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.NodaConverters.IsoIntervalConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.IsoIntervalConverter
  id: IsoIntervalConverter
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: IsoIntervalConverter
  nameWithType: NodaConverters.IsoIntervalConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.IsoIntervalConverter
  type: Property
  source:
    id: IsoIntervalConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 58
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConverter for intervals using extended ISO-8601 format, as output by <xref href=\"NodaTime.Interval.ToString\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static JsonConverter IsoIntervalConverter { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonConverter
    content.vb: Public Shared ReadOnly Property IsoIntervalConverter As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.IsoIntervalConverter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.NodaConverters.DateIntervalConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.DateIntervalConverter
  id: DateIntervalConverter
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: DateIntervalConverter
  nameWithType: NodaConverters.DateIntervalConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.DateIntervalConverter
  type: Property
  source:
    id: DateIntervalConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 64
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConverter for date intervals. This must be used in a serializer which also has a local date converter.\n"
  example: []
  syntax:
    content: public static JsonConverter DateIntervalConverter { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonConverter
    content.vb: Public Shared ReadOnly Property DateIntervalConverter As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.DateIntervalConverter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.NodaConverters.IsoDateIntervalConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.IsoDateIntervalConverter
  id: IsoDateIntervalConverter
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: IsoDateIntervalConverter
  nameWithType: NodaConverters.IsoDateIntervalConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.IsoDateIntervalConverter
  type: Property
  source:
    id: IsoDateIntervalConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 69
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConverter for date intervals using ISO-8601 format, as defined by <xref href=\"NodaTime.Text.LocalDatePattern.Iso\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static JsonConverter IsoDateIntervalConverter { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonConverter
    content.vb: Public Shared ReadOnly Property IsoDateIntervalConverter As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.IsoDateIntervalConverter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.NodaConverters.OffsetConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.OffsetConverter
  id: OffsetConverter
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: OffsetConverter
  nameWithType: NodaConverters.OffsetConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.OffsetConverter
  type: Property
  source:
    id: OffsetConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 75
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConverter for offsets.\n"
  example: []
  syntax:
    content: public static JsonConverter OffsetConverter { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonConverter
    content.vb: Public Shared ReadOnly Property OffsetConverter As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.OffsetConverter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.NodaConverters.OffsetDateTimeConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.OffsetDateTimeConverter
  id: OffsetDateTimeConverter
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: OffsetDateTimeConverter
  nameWithType: NodaConverters.OffsetDateTimeConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.OffsetDateTimeConverter
  type: Property
  source:
    id: OffsetDateTimeConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 81
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConverter for offset date/times.\n"
  example: []
  syntax:
    content: public static JsonConverter OffsetDateTimeConverter { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonConverter
    content.vb: Public Shared ReadOnly Property OffsetDateTimeConverter As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.OffsetDateTimeConverter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.NodaConverters.OffsetDateConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.OffsetDateConverter
  id: OffsetDateConverter
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: OffsetDateConverter
  nameWithType: NodaConverters.OffsetDateConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.OffsetDateConverter
  type: Property
  source:
    id: OffsetDateConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 88
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConverter for offset dates.\n"
  example: []
  syntax:
    content: public static JsonConverter OffsetDateConverter { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonConverter
    content.vb: Public Shared ReadOnly Property OffsetDateConverter As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.OffsetDateConverter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.NodaConverters.OffsetTimeConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.OffsetTimeConverter
  id: OffsetTimeConverter
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: OffsetTimeConverter
  nameWithType: NodaConverters.OffsetTimeConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.OffsetTimeConverter
  type: Property
  source:
    id: OffsetTimeConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 95
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConverter for offset times.\n"
  example: []
  syntax:
    content: public static JsonConverter OffsetTimeConverter { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonConverter
    content.vb: Public Shared ReadOnly Property OffsetTimeConverter As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.OffsetTimeConverter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.NodaConverters.CreateZonedDateTimeConverter(NodaTime.IDateTimeZoneProvider)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverters.CreateZonedDateTimeConverter(NodaTime.IDateTimeZoneProvider)
  id: CreateZonedDateTimeConverter(NodaTime.IDateTimeZoneProvider)
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: CreateZonedDateTimeConverter(IDateTimeZoneProvider)
  nameWithType: NodaConverters.CreateZonedDateTimeConverter(IDateTimeZoneProvider)
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.CreateZonedDateTimeConverter(NodaTime.IDateTimeZoneProvider)
  type: Method
  source:
    id: CreateZonedDateTimeConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 103
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nCreates a converter for zoned date/times, using the given time zone provider.\n"
  example: []
  syntax:
    content: public static JsonConverter CreateZonedDateTimeConverter(IDateTimeZoneProvider provider)
    parameters:
    - id: provider
      type: NodaTime.IDateTimeZoneProvider
      description: The time zone provider to use when parsing.
    return:
      type: Newtonsoft.Json.JsonConverter
      description: A converter to handle <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function CreateZonedDateTimeConverter(provider As IDateTimeZoneProvider) As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.CreateZonedDateTimeConverter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Serialization.JsonNet.NodaConverters.CreateDateTimeZoneConverter(NodaTime.IDateTimeZoneProvider)
  commentId: M:NodaTime.Serialization.JsonNet.NodaConverters.CreateDateTimeZoneConverter(NodaTime.IDateTimeZoneProvider)
  id: CreateDateTimeZoneConverter(NodaTime.IDateTimeZoneProvider)
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: CreateDateTimeZoneConverter(IDateTimeZoneProvider)
  nameWithType: NodaConverters.CreateDateTimeZoneConverter(IDateTimeZoneProvider)
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.CreateDateTimeZoneConverter(NodaTime.IDateTimeZoneProvider)
  type: Method
  source:
    id: CreateDateTimeZoneConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 113
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nCreates a converter for time zones, using the given provider.\n"
  example: []
  syntax:
    content: public static JsonConverter CreateDateTimeZoneConverter(IDateTimeZoneProvider provider)
    parameters:
    - id: provider
      type: NodaTime.IDateTimeZoneProvider
      description: The time zone provider to use when parsing.
    return:
      type: Newtonsoft.Json.JsonConverter
      description: A converter to handle <xref href="NodaTime.DateTimeZone" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function CreateDateTimeZoneConverter(provider As IDateTimeZoneProvider) As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.CreateDateTimeZoneConverter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Serialization.JsonNet.NodaConverters.DurationConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.DurationConverter
  id: DurationConverter
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: DurationConverter
  nameWithType: NodaConverters.DurationConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.DurationConverter
  type: Property
  source:
    id: DurationConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 119
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nConverter for durations.\n"
  example: []
  syntax:
    content: public static JsonConverter DurationConverter { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonConverter
    content.vb: Public Shared ReadOnly Property DurationConverter As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.DurationConverter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.NodaConverters.RoundtripPeriodConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.RoundtripPeriodConverter
  id: RoundtripPeriodConverter
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: RoundtripPeriodConverter
  nameWithType: NodaConverters.RoundtripPeriodConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.RoundtripPeriodConverter
  type: Property
  source:
    id: RoundtripPeriodConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 126
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nRound-tripping converter for periods. Use this when you really want to preserve information,\nand don&apos;t need interoperability with systems expecting ISO.\n"
  example: []
  syntax:
    content: public static JsonConverter RoundtripPeriodConverter { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonConverter
    content.vb: Public Shared ReadOnly Property RoundtripPeriodConverter As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.RoundtripPeriodConverter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Serialization.JsonNet.NodaConverters.NormalizingIsoPeriodConverter
  commentId: P:NodaTime.Serialization.JsonNet.NodaConverters.NormalizingIsoPeriodConverter
  id: NormalizingIsoPeriodConverter
  parent: NodaTime.Serialization.JsonNet.NodaConverters
  langs:
  - csharp
  - vb
  name: NormalizingIsoPeriodConverter
  nameWithType: NodaConverters.NormalizingIsoPeriodConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.NormalizingIsoPeriodConverter
  type: Property
  source:
    id: NormalizingIsoPeriodConverter
    path: C:\users\skeet\GitHub\nodatime\nodatime.serialization\src\NodaTime.Serialization.JsonNet\NodaConverters.cs
    startLine: 134
  assemblies:
  - NodaTime.Serialization.JsonNet
  namespace: NodaTime.Serialization.JsonNet
  summary: "\nNormalizing ISO converter for periods. Use this when you want compatibility with systems expecting\nISO durations (~= Noda Time periods). However, note that Noda Time can have negative periods. Note that\nthis converter loses information - after serialization and deserialization, &quot;90 minutes&quot; will become &quot;an hour and 30 minutes&quot;.\n"
  example: []
  syntax:
    content: public static JsonConverter NormalizingIsoPeriodConverter { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.JsonConverter
    content.vb: Public Shared ReadOnly Property NormalizingIsoPeriodConverter As JsonConverter
  overload: NodaTime.Serialization.JsonNet.NodaConverters.NormalizingIsoPeriodConverter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: NodaTime.Serialization.JsonNet
  commentId: N:NodaTime.Serialization.JsonNet
  name: NodaTime.Serialization.JsonNet
  nameWithType: NodaTime.Serialization.JsonNet
  fullName: NodaTime.Serialization.JsonNet
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.Serialization.JsonNet.NodaConverters.InstantConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.InstantConverter
  name: InstantConverter
  nameWithType: NodaConverters.InstantConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.InstantConverter
- uid: Newtonsoft.Json.JsonConverter
  commentId: T:Newtonsoft.Json.JsonConverter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonConverter
  nameWithType: JsonConverter
  fullName: Newtonsoft.Json.JsonConverter
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: true
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: NodaTime.Serialization.JsonNet.NodaConverters.LocalDateConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.LocalDateConverter
  name: LocalDateConverter
  nameWithType: NodaConverters.LocalDateConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.LocalDateConverter
- uid: NodaTime.Serialization.JsonNet.NodaConverters.LocalDateTimeConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.LocalDateTimeConverter
  name: LocalDateTimeConverter
  nameWithType: NodaConverters.LocalDateTimeConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.LocalDateTimeConverter
- uid: NodaTime.Serialization.JsonNet.NodaConverters.LocalTimeConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.LocalTimeConverter
  name: LocalTimeConverter
  nameWithType: NodaConverters.LocalTimeConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.LocalTimeConverter
- uid: NodaTime.Serialization.JsonNet.NodaConverters.AnnualDateConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.AnnualDateConverter
  name: AnnualDateConverter
  nameWithType: NodaConverters.AnnualDateConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.AnnualDateConverter
- uid: NodaTime.Serialization.JsonNet.NodaConverters.IntervalConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.IntervalConverter
  name: IntervalConverter
  nameWithType: NodaConverters.IntervalConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.IntervalConverter
- uid: NodaTime.Interval.ToString
  commentId: M:NodaTime.Interval.ToString
  isExternal: true
- uid: NodaTime.Serialization.JsonNet.NodaConverters.IsoIntervalConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.IsoIntervalConverter
  name: IsoIntervalConverter
  nameWithType: NodaConverters.IsoIntervalConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.IsoIntervalConverter
- uid: NodaTime.Serialization.JsonNet.NodaConverters.DateIntervalConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.DateIntervalConverter
  name: DateIntervalConverter
  nameWithType: NodaConverters.DateIntervalConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.DateIntervalConverter
- uid: NodaTime.Text.LocalDatePattern.Iso
  commentId: P:NodaTime.Text.LocalDatePattern.Iso
  isExternal: true
- uid: NodaTime.Serialization.JsonNet.NodaConverters.IsoDateIntervalConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.IsoDateIntervalConverter
  name: IsoDateIntervalConverter
  nameWithType: NodaConverters.IsoDateIntervalConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.IsoDateIntervalConverter
- uid: NodaTime.Serialization.JsonNet.NodaConverters.OffsetConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.OffsetConverter
  name: OffsetConverter
  nameWithType: NodaConverters.OffsetConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.OffsetConverter
- uid: NodaTime.Serialization.JsonNet.NodaConverters.OffsetDateTimeConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.OffsetDateTimeConverter
  name: OffsetDateTimeConverter
  nameWithType: NodaConverters.OffsetDateTimeConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.OffsetDateTimeConverter
- uid: NodaTime.Serialization.JsonNet.NodaConverters.OffsetDateConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.OffsetDateConverter
  name: OffsetDateConverter
  nameWithType: NodaConverters.OffsetDateConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.OffsetDateConverter
- uid: NodaTime.Serialization.JsonNet.NodaConverters.OffsetTimeConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.OffsetTimeConverter
  name: OffsetTimeConverter
  nameWithType: NodaConverters.OffsetTimeConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.OffsetTimeConverter
- uid: NodaTime.ZonedDateTime
  commentId: T:NodaTime.ZonedDateTime
  isExternal: true
- uid: NodaTime.Serialization.JsonNet.NodaConverters.CreateZonedDateTimeConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.CreateZonedDateTimeConverter
  name: CreateZonedDateTimeConverter
  nameWithType: NodaConverters.CreateZonedDateTimeConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.CreateZonedDateTimeConverter
- uid: NodaTime.IDateTimeZoneProvider
  commentId: T:NodaTime.IDateTimeZoneProvider
  parent: NodaTime
  isExternal: true
  name: IDateTimeZoneProvider
  nameWithType: IDateTimeZoneProvider
  fullName: NodaTime.IDateTimeZoneProvider
- uid: NodaTime
  commentId: N:NodaTime
  isExternal: true
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: NodaTime.DateTimeZone
  commentId: T:NodaTime.DateTimeZone
  isExternal: true
- uid: NodaTime.Serialization.JsonNet.NodaConverters.CreateDateTimeZoneConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.CreateDateTimeZoneConverter
  name: CreateDateTimeZoneConverter
  nameWithType: NodaConverters.CreateDateTimeZoneConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.CreateDateTimeZoneConverter
- uid: NodaTime.Serialization.JsonNet.NodaConverters.DurationConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.DurationConverter
  name: DurationConverter
  nameWithType: NodaConverters.DurationConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.DurationConverter
- uid: NodaTime.Serialization.JsonNet.NodaConverters.RoundtripPeriodConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.RoundtripPeriodConverter
  name: RoundtripPeriodConverter
  nameWithType: NodaConverters.RoundtripPeriodConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.RoundtripPeriodConverter
- uid: NodaTime.Serialization.JsonNet.NodaConverters.NormalizingIsoPeriodConverter*
  commentId: Overload:NodaTime.Serialization.JsonNet.NodaConverters.NormalizingIsoPeriodConverter
  name: NormalizingIsoPeriodConverter
  nameWithType: NodaConverters.NormalizingIsoPeriodConverter
  fullName: NodaTime.Serialization.JsonNet.NodaConverters.NormalizingIsoPeriodConverter
shouldSkipMarkup: true
